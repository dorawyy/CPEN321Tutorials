rules:
  - id: cors-misconfiguration # Security auth
    message: By letting user input control CORS parameters, there is a risk that
      software does not properly verify that the source of data or communication
      is valid. Use literal values for CORS settings.
    metadata:
      owasp:
        - A07:2021 - Identification and Authentication Failures
      cwe:
        - "CWE-346: Origin Validation Error"
      category: security
      references:
        - https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS
      technology:
        - express
      subcategory:
        - vuln
      likelihood: MEDIUM
      impact: MEDIUM
      confidence: MEDIUM
      license: Semgrep Rules License v1.0. For more details, visit
        semgrep.dev/legal/rules-license
      vulnerability_class:
        - Improper Authentication
    languages:
      - javascript
      - typescript
    severity: WARNING
    mode: taint
    pattern-sources:
      - patterns:
          - pattern-either:
              - pattern-inside: function ... ($REQ, $RES) {...}
              - pattern-inside: function ... ($REQ, $RES, $NEXT) {...}
              - patterns:
                  - pattern-either:
                      - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES) {...})
                      - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES, $NEXT) {...})
                  - metavariable-regex:
                      metavariable: $METHOD
                      regex: ^(get|post|put|head|delete|options)$
          - pattern-either:
              - pattern: $REQ.query
              - pattern: $REQ.body
              - pattern: $REQ.params
              - pattern: $REQ.cookies
              - pattern: $REQ.headers
      - patterns:
          - pattern-either:
              - pattern-inside: |
                  ({ $REQ }: Request,$RES: Response, $NEXT: NextFunction) =>
                  {...}
              - pattern-inside: |
                  ({ $REQ }: Request,$RES: Response) => {...}
          - focus-metavariable: $REQ
          - pattern-either:
              - pattern: params
              - pattern: query
              - pattern: cookies
              - pattern: headers
              - pattern: body
    pattern-sinks:
      - patterns:
          - pattern-either:
              - pattern: $RES.set($HEADER, $X)
              - pattern: $RES.header($HEADER, $X)
              - pattern: $RES.setHeader($HEADER, $X)
              - pattern: |
                  $RES.set({$HEADER: $X}, ...)
              - pattern: |
                  $RES.writeHead($STATUS, {$HEADER: $X}, ...)
          - focus-metavariable: $X
          - metavariable-regex:
              metavariable: $HEADER
              regex: .*(Access-Control-Allow-Origin|access-control-allow-origin).*

  - id: hardcoded-jwt-secret # security auth
    message: A hard-coded credential was detected. It is not recommended to store
      credentials in source-code, as this risks secrets being leaked and used by
      either an internal or external malicious adversary. It is recommended to
      use environment variables to securely provide credentials or retrieve
      credentials from a secure vault or HSM (Hardware Security Module).
    metadata:
      cwe:
        - "CWE-798: Use of Hard-coded Credentials"
      references:
        - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html
      owasp:
        - A07:2021 - Identification and Authentication Failures
      asvs:
        section: "V3: Session Management Verification Requirements"
        control_id: 3.5.2 Static API keys or secret
        control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x12-V3-Session-management.md#v35-token-based-session-management
        version: "4"
      category: security
      technology:
        - jwt
        - javascript
        - secrets
      cwe2022-top25: true
      cwe2021-top25: true
      subcategory:
        - vuln
      likelihood: HIGH
      impact: MEDIUM
      confidence: HIGH
      license: Semgrep Rules License v1.0. For more details, visit
        semgrep.dev/legal/rules-license
      vulnerability_class:
        - Hard-coded Secrets
    languages:
      - javascript
      - typescript
    severity: WARNING
    mode: taint
    pattern-sources:
      - patterns:
          - pattern: |
              $X = '...' 
          - pattern: |
              $X = '$Y' 
      - patterns:
          - pattern-either:
              - pattern-inside: |
                  $JWT.sign($DATA,"...",...);
              - pattern-inside: |
                  $JWT.verify($DATA,"...",...);
    pattern-sinks:
      - patterns:
          - pattern-either:
              - pattern-inside: |
                  $JWT = require("jsonwebtoken")
                  ...
              - pattern-inside: |
                  import $JWT from "jsonwebtoken"
                  ...
              - pattern-inside: |
                  import * as $JWT from "jsonwebtoken"
                  ...
              - pattern-inside: |
                  import {...,$JWT,...} from "jsonwebtoken"
                  ...
          - pattern-either:
              - pattern-inside: |
                  $JWT.sign($DATA,$VALUE,...);
              - pattern-inside: |
                  $JWT.verify($DATA,$VALUE,...);
          - focus-metavariable: $VALUE
  
  - id: jwt-none-alg # security visibility
    message: Detected use of the 'none' algorithm in a JWT token. The 'none'
      algorithm assumes the integrity of the token has already been verified.
      This would allow a malicious actor to forge a JWT token that will
      automatically be verified. Do not explicitly use the 'none' algorithm.
      Instead, use an algorithm such as 'HS256'.
    metadata:
      cwe:
        - "CWE-327: Use of a Broken or Risky Cryptographic Algorithm"
      owasp:
        - A03:2017 - Sensitive Data Exposure
        - A02:2021 - Cryptographic Failures
      source-rule-url: https://semgrep.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/
      asvs:
        section: "V3: Session Management Verification Requirements"
        control_id: 3.5.3 Insecue Stateless Session Tokens
        control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x12-V3-Session-management.md#v35-token-based-session-management
        version: "4"
      category: security
      technology:
        - jwt
      subcategory:
        - vuln
      likelihood: MEDIUM
      impact: HIGH
      confidence: MEDIUM
      references:
        - https://owasp.org/Top10/A02_2021-Cryptographic_Failures
      license: Semgrep Rules License v1.0. For more details, visit
        semgrep.dev/legal/rules-license
      vulnerability_class:
        - Cryptographic Issues
    languages:
      - javascript
      - typescript
    severity: ERROR
    patterns:
      - pattern-inside: |
          $JWT = require("jsonwebtoken");
          ...
      - pattern: $JWT.verify($P, $X, {algorithms:[...,'none',...]},...)

  - id: chrome-remote-interface-compilescript-injection # codacy
    message: If unverified user data can reach the `compileScript` method it can
      result in Server-Side Request Forgery vulnerabilities
    metadata:
      owasp:
        - A10:2021 - Server-Side Request Forgery (SSRF)
      cwe:
        - "CWE-918: Server-Side Request Forgery (SSRF)"
      category: security
      technology:
        - chrome-remote-interface
      references:
        - https://github.com/cyrus-and/chrome-remote-interface
      cwe2022-top25: true
      cwe2021-top25: true
      subcategory:
        - vuln
      likelihood: MEDIUM
      impact: MEDIUM
      confidence: MEDIUM
      license: Semgrep Rules License v1.0. For more details, visit
        semgrep.dev/legal/rules-license
      vulnerability_class:
        - Server-Side Request Forgery (SSRF)
    languages:
      - javascript
      - typescript
    severity: WARNING
    mode: taint
    pattern-sources:
      - patterns:
          - pattern-inside: function ... (..., $ARG,...) {...}
          - focus-metavariable: $ARG
    pattern-sinks:
      - patterns:
          - pattern-either:
              - pattern-inside: |
                  require('chrome-remote-interface');
                  ...
              - pattern-inside: |
                  import 'chrome-remote-interface';
                  ...
          - pattern-either:
              - pattern: |
                  $RUNTIME.compileScript({expression: $SINK},...)
              - pattern: |
                  $RUNTIME.evaluate({expression: $SINK},...)
              - pattern: |
                  $PAGE.navigate({url: $SINK},...)
              - pattern: |
                  $RUNTIME.printToPDF({headerTemplate: $SINK},...)
              - pattern: |
                  $RUNTIME.printToPDF({footerTemplate: $SINK},...)
              - pattern: |
                  $PAGE.setDocumentContent({html: $SINK},...)
          - focus-metavariable: $SINK

  - id: express-jwt-not-revoked
    message: No token revoking configured for `express-jwt`. A leaked token could
      still be used and unable to be revoked. Consider using function as the
      `isRevoked` option.
    metadata:
      cwe:
        - "CWE-522: Insufficiently Protected Credentials"
      owasp:
        - A02:2017 - Broken Authentication
        - A04:2021 - Insecure Design
      source-rule-url: https://github.com/goldbergyoni/nodebestpractices/blob/master/sections/security/expirejwt.md
      asvs:
        section: "V3: Session Management Verification Requirements"
        control_id: 3.5.3 Insecue Stateless Session Tokens
        control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x12-V3-Session-management.md#v35-token-based-session-management
        version: "4"
      category: security
      technology:
        - express
      cwe2021-top25: true
      subcategory:
        - vuln
      likelihood: MEDIUM
      impact: MEDIUM
      confidence: MEDIUM
      references:
        - https://owasp.org/Top10/A04_2021-Insecure_Design
      license: Semgrep Rules License v1.0. For more details, visit
        semgrep.dev/legal/rules-license
      vulnerability_class:
        - Cryptographic Issues
    languages:
      - javascript
      - typescript
    severity: WARNING
    patterns:
      - pattern-inside: |
          $JWT = require('express-jwt');
          ...
      - pattern: $JWT(...)
      - pattern-not-inside: $JWT(<... {isRevoked:...} ...>,...)
      - pattern-not-inside: |-
          $OPTS = <... {isRevoked:...} ...>;
          ...
          $JWT($OPTS,...);


  - id: express-open-redirect
    message: The application redirects to a URL specified by user-supplied input
      `$REQ` that is not validated. This could redirect users to malicious
      locations. Consider using an allow-list approach to validate URLs, or warn
      users they are being redirected to a third-party website.
    metadata:
      technology:
        - express
      references:
        - https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html
      cwe:
        - "CWE-601: URL Redirection to Untrusted Site ('Open Redirect')"
      category: security
      owasp:
        - A01:2021 - Broken Access Control
      subcategory:
        - vuln
      likelihood: HIGH
      impact: MEDIUM
      confidence: HIGH
      license: Semgrep Rules License v1.0. For more details, visit
        semgrep.dev/legal/rules-license
      vulnerability_class:
        - Open Redirect
    languages:
      - javascript
      - typescript
    severity: WARNING
    options:
      taint_unify_mvars: true
      symbolic_propagation: true
    mode: taint
    pattern-sources:
      - patterns:
          - pattern-either:
              - pattern-inside: function ... ($REQ, $RES) {...}
              - pattern-inside: function ... ($REQ, $RES, $NEXT) {...}
              - patterns:
                  - pattern-either:
                      - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES) {...})
                      - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES, $NEXT) {...})
                  - metavariable-regex:
                      metavariable: $METHOD
                      regex: ^(get|post|put|head|delete|options)$
          - pattern-either:
              - pattern: $REQ.query
              - pattern: $REQ.body
              - pattern: $REQ.params
              - pattern: $REQ.cookies
              - pattern: $REQ.headers
      - patterns:
          - pattern-either:
              - pattern-inside: |
                  ({ $REQ }: Request,$RES: Response, $NEXT: NextFunction) =>
                  {...}
              - pattern-inside: |
                  ({ $REQ }: Request,$RES: Response) => {...}
          - focus-metavariable: $REQ
          - pattern-either:
              - pattern: params
              - pattern: query
              - pattern: cookies
              - pattern: headers
              - pattern: body
    pattern-sinks:
      - patterns:
          - pattern-either:
              - pattern: $RES.redirect("$HTTP"+$REQ. ... .$VALUE)
              - pattern: $RES.redirect("$HTTP"+$REQ. ... .$VALUE + $...A)
              - pattern: $RES.redirect(`$HTTP${$REQ. ... .$VALUE}...`)
              - pattern: $RES.redirect("$HTTP"+$REQ.$VALUE[...])
              - pattern: $RES.redirect("$HTTP"+$REQ.$VALUE[...] + $...A)
              - pattern: $RES.redirect(`$HTTP${$REQ.$VALUE[...]}...`)
          - metavariable-regex:
              metavariable: $HTTP
              regex: ^https?:\/\/$
          - pattern-either:
              - pattern: $REQ. ... .$VALUE
      - patterns:
          - pattern-either:
              - pattern: $RES.redirect($REQ. ... .$VALUE)
              - pattern: $RES.redirect($REQ. ... .$VALUE + $...A)
              - pattern: $RES.redirect(`${$REQ. ... .$VALUE}...`)
          - pattern: $REQ. ... .$VALUE
      - patterns:
          - pattern-either:
              - pattern: $RES.redirect($REQ.$VALUE['...'])
              - pattern: $RES.redirect($REQ.$VALUE['...'] + $...A)
              - pattern: $RES.redirect(`${$REQ.$VALUE['...']}...`)
          - pattern: $REQ.$VALUE
      - patterns:
          - pattern-either:
              - pattern-inside: |
                  $ASSIGN = $REQ. ... .$VALUE
                  ...
              - pattern-inside: |
                  $ASSIGN = $REQ.$VALUE['...']
                  ...
              - pattern-inside: |
                  $ASSIGN = $REQ. ... .$VALUE + $...A
                  ...
              - pattern-inside: |
                  $ASSIGN = $REQ.$VALUE['...'] + $...A
                  ...     
              - pattern-inside: |
                  $ASSIGN = `${$REQ. ... .$VALUE}...`
                  ...
              - pattern-inside: |
                  $ASSIGN = `${$REQ.$VALUE['...']}...`
                  ...                    
          - pattern-either:
              - pattern: $RES.redirect($ASSIGN)
              - pattern: $RES.redirect($ASSIGN + $...FOO)
              - pattern: $RES.redirect(`${$ASSIGN}...`)
          - focus-metavariable: $ASSIGN


  - id: rsa-no-padding
    languages:
      - java
    severity: ERROR
    message: Using RSA without OAEP mode weakens the encryption.
    pattern: $CIPHER.getInstance("=~/RSA/[Nn][Oo][Nn][Ee]/NoPadding/")
    metadata:
      functional-categories:
        - crypto::search::mode::javax.crypto
      cwe:
        - "CWE-326: Inadequate Encryption Strength"
      owasp:
        - A03:2017 - Sensitive Data Exposure
        - A02:2021 - Cryptographic Failures
      source-rule-url: https://find-sec-bugs.github.io/bugs.htm#RSA_NO_PADDING
      references:
        - https://rdist.root.org/2009/10/06/why-rsa-encryption-padding-is-critical/
      asvs:
        section: V6 Stored Cryptography Verification Requirements
        control_id: 6.2.5 Insecure Algorithm
        control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x14-V6-Cryptography.md#v62-algorithms
        version: "4"
      category: security
      technology:
        - java
        - kotlin
      subcategory:
        - vuln
      likelihood: MEDIUM
      impact: MEDIUM
      confidence: HIGH
      license: Semgrep Rules License v1.0. For more details, visit
        semgrep.dev/legal/rules-license
      vulnerability_class:
        - Cryptographic Issues


  - id: awscdk-bucket-grantpublicaccessmethod
    message: Using the GrantPublicAccess method on bucket contruct $X will make the
      objects in the bucket world accessible. Verify if this is intentional.
    metadata:
      cwe:
        - "CWE-306: Missing Authentication for Critical Function"
      category: security
      technology:
        - AWS-CDK
      references:
        - https://docs.aws.amazon.com/AmazonS3/latest/userguide/access-control-overview.html
      owasp:
        - A07:2021 - Identification and Authentication Failures
      cwe2022-top25: true
      cwe2021-top25: true
      subcategory:
        - vuln
      likelihood: HIGH
      impact: HIGH
      confidence: MEDIUM
      license: Semgrep Rules License v1.0. For more details, visit
        semgrep.dev/legal/rules-license
      vulnerability_class:
        - Improper Authentication
    languages:
      - ts
    severity: WARNING
    pattern-either:
      - patterns:
          - pattern-inside: |
              import {Bucket} from '@aws-cdk/aws-s3'
              ...
          - pattern: |
              const $X = new Bucket(...)
              ...
              $X.grantPublicAccess(...)
      - patterns:
          - pattern-inside: |
              import * as $Y from '@aws-cdk/aws-s3'
              ...
          - pattern: |
              const $X = new $Y.Bucket(...)
              ...
              $X.grantPublicAccess(...)

  - id: pg-sqli
    message: "Detected SQL statement that is tainted by `$EVENT` object. This could
      lead to SQL injection if the variable is user-controlled and not properly
      sanitized. In order to prevent SQL injection, use parameterized queries or
      prepared statements instead. You can use parameterized statements like so:
      `connection.query('SELECT $1 from table', [userinput])`"
    metadata:
      references:
        - https://node-postgres.com/features/queries
      category: security
      owasp:
        - A01:2017 - Injection
        - A03:2021 - Injection
      cwe:
        - "CWE-89: Improper Neutralization of Special Elements used in an SQL
          Command ('SQL Injection')"
      technology:
        - aws-lambda
        - postgres
        - pg
      cwe2022-top25: true
      cwe2021-top25: true
      subcategory:
        - vuln
      likelihood: MEDIUM
      impact: HIGH
      confidence: MEDIUM
      license: Semgrep Rules License v1.0. For more details, visit
        semgrep.dev/legal/rules-license
      vulnerability_class:
        - SQL Injection
    languages:
      - javascript
      - typescript
    severity: WARNING
    mode: taint
    pattern-sources:
      - patterns:
          - pattern-either:
              - pattern-inside: |
                  exports.handler = function ($EVENT, ...) {
                    ...
                  }
              - pattern-inside: |
                  function $FUNC ($EVENT, ...) {...}
                  ...
                  exports.handler = $FUNC
              - pattern-inside: |
                  $FUNC = function ($EVENT, ...) {...}
                  ...
                  exports.handler = $FUNC
          - pattern: $EVENT
    pattern-sinks:
      - patterns:
          - focus-metavariable: $QUERY
          - pattern-either:
              - pattern: $DB.query($QUERY, ...)
          - pattern-either:
              - pattern-inside: |
                  require('pg')
                  ...
              - pattern-inside: |
                  import 'pg'
                  ...

  - id: express-cookie-session-no-expires
    message: "Default session middleware settings: `expires` not set. Use it to set
      expiration date for persistent cookies."
    severity: WARNING
    languages:
      - javascript
      - typescript
    metadata:
      cwe:
        - "CWE-522: Insufficiently Protected Credentials"
      owasp:
        - A02:2017 - Broken Authentication
        - A04:2021 - Insecure Design
      source-rule-url: https://expressjs.com/en/advanced/best-practice-security.html
      category: security
      technology:
        - express
      cwe2021-top25: true
      subcategory:
        - vuln
      likelihood: HIGH
      impact: LOW
      confidence: MEDIUM
      references:
        - https://owasp.org/Top10/A04_2021-Insecure_Design
      license: Semgrep Rules License v1.0. For more details, visit
        semgrep.dev/legal/rules-license
      vulnerability_class:
        - Cryptographic Issues
    patterns:
      - pattern-either:
          - pattern-inside: |
              $SESSION = require('cookie-session');
              ...
          - pattern-inside: |
              $SESSION = require('express-session');
              ...
      - pattern: $SESSION(...)
      - pattern-not-inside: $SESSION(<... {cookie:{expires:...}} ...>,...)
      - pattern-not-inside: |
          $OPTS = <... {cookie:{expires:...}} ...>;
          ...
          $SESSION($OPTS,...);
      - pattern-not-inside: |
          $OPTS = ...;
          ...
          $COOKIE = <... {expires:...} ...>;
          ...
          $SESSION($OPTS,...);
      - pattern-not-inside: |
          $OPTS = ...;
          ...
          $OPTS.cookie = <... {expires:...} ...>;
          ...
          $SESSION($OPTS,...);
      - pattern-not-inside: |
          $OPTS = ...;
          ...
          $COOKIE.expires = ...;
          ...
          $SESSION($OPTS,...);
      - pattern-not-inside: |-
          $OPTS = ...;
          ...
          $OPTS.cookie.expires = ...;
          ...
          $SESSION($OPTS,...);

  - id: express-session-hardcoded-secret
    message: A hard-coded credential was detected. It is not recommended to store
      credentials in source-code, as this risks secrets being leaked and used by
      either an internal or external malicious adversary. It is recommended to
      use environment variables to securely provide credentials or retrieve
      credentials from a secure vault or HSM (Hardware Security Module).
    options:
      interfile: true
    metadata:
      interfile: true
      cwe:
        - "CWE-798: Use of Hard-coded Credentials"
      references:
        - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html
      owasp:
        - A07:2021 - Identification and Authentication Failures
      category: security
      technology:
        - express
        - secrets
      cwe2022-top25: true
      cwe2021-top25: true
      subcategory:
        - vuln
      likelihood: HIGH
      impact: HIGH
      confidence: HIGH
      license: Semgrep Rules License v1.0. For more details, visit
        semgrep.dev/legal/rules-license
      vulnerability_class:
        - Hard-coded Secrets
    languages:
      - javascript
      - typescript
    severity: WARNING
    patterns:
      - pattern-either:
          - pattern-inside: |
              $SESSION = require('express-session');
              ...
          - pattern-inside: |
              import $SESSION from 'express-session'
              ...
          - pattern-inside: |
              import {..., $SESSION, ...} from 'express-session'
              ...
          - pattern-inside: |
              import * as $SESSION from 'express-session'
              ...
      - patterns:
          - pattern-either:
              - pattern-inside: $APP.use($SESSION({...}))
              - pattern: |
                  $SECRET = $VALUE
                  ...
                  $APP.use($SESSION($SECRET))
          - pattern: |
              secret: '$Y'

  - id: express-vm2-injection
    message: Make sure that unverified user data can not reach `vm2`.
    metadata:
      owasp:
        - A03:2021 - Injection
      references:
        - https://cheatsheetseries.owasp.org/cheatsheets/Injection_Prevention_Cheat_Sheet.html
      cwe:
        - "CWE-94: Improper Control of Generation of Code ('Code Injection')"
      category: security
      technology:
        - express
      cwe2022-top25: true
      subcategory:
        - vuln
      likelihood: MEDIUM
      impact: MEDIUM
      confidence: MEDIUM
      license: Semgrep Rules License v1.0. For more details, visit
        semgrep.dev/legal/rules-license
      vulnerability_class:
        - Code Injection
    languages:
      - javascript
      - typescript
    severity: WARNING
    mode: taint
    pattern-sources:
      - patterns:
          - pattern-either:
              - pattern-inside: function ... ($REQ, $RES) {...}
              - pattern-inside: function ... ($REQ, $RES, $NEXT) {...}
              - patterns:
                  - pattern-either:
                      - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES) {...})
                      - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES, $NEXT) {...})
                  - metavariable-regex:
                      metavariable: $METHOD
                      regex: ^(get|post|put|head|delete|options)$
          - pattern-either:
              - pattern: $REQ.query
              - pattern: $REQ.body
              - pattern: $REQ.params
              - pattern: $REQ.cookies
              - pattern: $REQ.headers
      - patterns:
          - pattern-either:
              - pattern-inside: |
                  ({ $REQ }: Request,$RES: Response, $NEXT: NextFunction) =>
                  {...}
              - pattern-inside: |
                  ({ $REQ }: Request,$RES: Response) => {...}
          - focus-metavariable: $REQ
          - pattern-either:
              - pattern: params
              - pattern: query
              - pattern: cookies
              - pattern: headers
              - pattern: body
    pattern-sinks:
      - patterns:
          - pattern-inside: |
              require('vm2')
              ...
          - pattern-either:
              - patterns:
                  - pattern-either:
                      - pattern-inside: |
                          $VM = new VM(...)
                          ...
                      - pattern-inside: |
                          $VM = new NodeVM(...)
                          ...
                  - pattern: |
                      $VM.run(...)
              - pattern: |
                  new VM(...).run(...)
              - pattern: |
                  new NodeVM(...).run(...)
              - pattern: |
                  new VMScript(...)
              - pattern: |
                  new VM(...)
              - pattern: new NodeVM(...)

  - id: react-insecure-request
    message: Unencrypted request over HTTP detected.
    metadata:
      vulnerability: Insecure Transport
      owasp:
        - A03:2017 - Sensitive Data Exposure
        - A02:2021 - Cryptographic Failures
      cwe:
        - "CWE-319: Cleartext Transmission of Sensitive Information"
      references:
        - https://www.npmjs.com/package/axios
      category: security
      technology:
        - react
      subcategory:
        - vuln
      likelihood: LOW
      impact: MEDIUM
      confidence: MEDIUM
      license: Semgrep Rules License v1.0. For more details, visit
        semgrep.dev/legal/rules-license
      vulnerability_class:
        - Mishandled Sensitive Information
    languages:
      - typescript
      - javascript
    severity: ERROR
    patterns:
      - pattern-either:
          - patterns:
              - pattern-either:
                  - pattern-inside: |
                      import $AXIOS from 'axios';
                      ...
                      $AXIOS.$METHOD(...)
                  - pattern-inside: |
                      $AXIOS = require('axios');
                      ...
                      $AXIOS.$METHOD(...)
              - pattern: $AXIOS.$VERB("$URL",...)
              - metavariable-regex:
                  metavariable: $VERB
                  regex: ^(get|post|delete|head|patch|put|options)
          - patterns:
              - pattern-either:
                  - pattern-inside: |
                      import $AXIOS from 'axios';
                      ...
                      $AXIOS(...)
                  - pattern-inside: |
                      $AXIOS = require('axios');
                      ...
                      $AXIOS(...)
              - pattern-either:
                  - pattern: '$AXIOS({url: "$URL"}, ...)'
                  - pattern: |
                      $OPTS = {url: "$URL"}
                      ...
                      $AXIOS($OPTS, ...)
          - pattern: fetch("$URL", ...)
      - metavariable-regex:
          metavariable: $URL
          regex: ^([Hh][Tt][Tt][Pp]:\/\/(?!localhost).*)

  - id: detect-child-process
    message: Allowing spawning arbitrary programs or running shell processes with
      arbitrary arguments may end up in a command injection vulnerability. Try
      to avoid non-literal values for the command string. If it is not possible,
      then do not let running arbitrary commands, use a white list for inputs.
    metadata:
      cwe:
        - "CWE-78: Improper Neutralization of Special Elements used in an OS
          Command ('OS Command Injection')"
      owasp:
        - A01:2017 - Injection
        - A03:2021 - Injection
      category: security
      technology:
        - javascript
        - aws-lambda
      cwe2022-top25: true
      cwe2021-top25: true
      subcategory:
        - vuln
      likelihood: MEDIUM
      impact: HIGH
      confidence: MEDIUM
      references:
        - https://owasp.org/Top10/A03_2021-Injection
      license: Semgrep Rules License v1.0. For more details, visit
        semgrep.dev/legal/rules-license
      vulnerability_class:
        - Command Injection
    languages:
      - javascript
      - typescript
    severity: ERROR
    mode: taint
    pattern-sources:
      - patterns:
          - pattern: $EVENT
          - pattern-either:
              - pattern-inside: |
                  exports.handler = function ($EVENT, ...) {
                    ...
                  }
              - pattern-inside: |
                  function $FUNC ($EVENT, ...) {...}
                  ...
                  exports.handler = $FUNC
              - pattern-inside: |
                  $FUNC = function ($EVENT, ...) {...}
                  ...
                  exports.handler = $FUNC
    pattern-sinks:
      - patterns:
          - focus-metavariable: $CMD
          - pattern-either:
              - pattern: exec($CMD,...)
              - pattern: execSync($CMD,...)
              - pattern: spawn($CMD,...)
              - pattern: spawnSync($CMD,...)
              - pattern: $CP.exec($CMD,...)
              - pattern: $CP.execSync($CMD,...)
              - pattern: $CP.spawn($CMD,...)
              - pattern: $CP.spawnSync($CMD,...)
          - pattern-either:
              - pattern-inside: |
                  require('child_process')
                  ...
              - pattern-inside: |
                  import 'child_process'
                  ...

  - id: dynamodb-request-object
    message: Detected DynamoDB query params that are tainted by `$EVENT` object.
      This could lead to NoSQL injection if the variable is user-controlled and
      not properly sanitized. Explicitly assign query params instead of passing
      data from `$EVENT` directly to DynamoDB client.
    metadata:
      cwe:
        - "CWE-943: Improper Neutralization of Special Elements in Data Query
          Logic"
      owasp:
        - A01:2017 - Injection
      category: security
      technology:
        - javascript
        - aws-lambda
        - dynamodb
      subcategory:
        - vuln
      likelihood: MEDIUM
      impact: HIGH
      confidence: MEDIUM
      references:
        - https://owasp.org/Top10/A03_2021-Injection
      license: Semgrep Rules License v1.0. For more details, visit
        semgrep.dev/legal/rules-license
      vulnerability_class:
        - Improper Validation
    languages:
      - javascript
      - typescript
    severity: ERROR
    mode: taint
    pattern-sources:
      - patterns:
          - pattern: $EVENT
          - pattern-either:
              - pattern-inside: |
                  exports.handler = function ($EVENT, ...) {
                    ...
                  }
              - pattern-inside: |
                  function $FUNC ($EVENT, ...) {...}
                  ...
                  exports.handler = $FUNC
              - pattern-inside: |
                  $FUNC = function ($EVENT, ...) {...}
                  ...
                  exports.handler = $FUNC
    pattern-sinks:
      - patterns:
          - focus-metavariable: $SINK
          - pattern: |
              $DC.$METHOD($SINK, ...)
          - metavariable-regex:
              metavariable: $METHOD
              regex: (query|send|scan|delete|put|transactWrite|update|batchExecuteStatement|executeStatement|executeTransaction|transactWriteItems)
          - pattern-either:
              - pattern-inside: |
                  $DC = new $AWS.DocumentClient(...);
                  ...
              - pattern-inside: |
                  $DC = new $AWS.DynamoDB(...);
                  ...
              - pattern-inside: |
                  $DC = new DynamoDBClient(...);
                  ...
              - pattern-inside: |
                  $DC = DynamoDBDocumentClient.from(...);
                  ...
    pattern-sanitizers:
      - patterns:
          - pattern: |
              {...}

  - id: mysql-sqli
    message: "Detected SQL statement that is tainted by `$EVENT` object. This could
      lead to SQL injection if the variable is user-controlled and not properly
      sanitized. In order to prevent SQL injection, use parameterized queries or
      prepared statements instead. You can use parameterized statements like so:
      `connection.query('SELECT $1 from table', [userinput])`"
    metadata:
      references:
        - https://www.npmjs.com/package/mysql2
      category: security
      owasp:
        - A01:2017 - Injection
        - A03:2021 - Injection
      cwe:
        - "CWE-89: Improper Neutralization of Special Elements used in an SQL
          Command ('SQL Injection')"
      technology:
        - aws-lambda
        - mysql
        - mysql2
      cwe2022-top25: true
      cwe2021-top25: true
      subcategory:
        - vuln
      likelihood: MEDIUM
      impact: HIGH
      confidence: MEDIUM
      license: Semgrep Rules License v1.0. For more details, visit
        semgrep.dev/legal/rules-license
      vulnerability_class:
        - SQL Injection
    languages:
      - javascript
      - typescript
    severity: WARNING
    mode: taint
    pattern-sources:
      - patterns:
          - pattern-either:
              - pattern-inside: |
                  exports.handler = function ($EVENT, ...) {
                    ...
                  }
              - pattern-inside: |
                  function $FUNC ($EVENT, ...) {...}
                  ...
                  exports.handler = $FUNC
              - pattern-inside: |
                  $FUNC = function ($EVENT, ...) {...}
                  ...
                  exports.handler = $FUNC
          - pattern: $EVENT
    pattern-sinks:
      - patterns:
          - focus-metavariable: $QUERY
          - pattern-either:
              - pattern: $POOL.query($QUERY, ...)
              - pattern: $POOL.execute($QUERY, ...)
          - pattern-either:
              - pattern-inside: |
                  require('mysql')
                  ...
              - pattern-inside: |
                  require('mysql2')
                  ...
              - pattern-inside: |
                  require('mysql2/promise')
                  ...
              - pattern-inside: |
                  import 'mysql'
                  ...
              - pattern-inside: |
                  import 'mysql2'
                  ...
              - pattern-inside: |
                  import 'mysql2/promise'
                  ...

  - id: sequelize-sqli
    message: "Detected SQL statement that is tainted by `$EVENT` object. This could
      lead to SQL injection if the variable is user-controlled and not properly
      sanitized. In order to prevent SQL injection, use parameterized queries or
      prepared statements instead. You can use parameterized statements like so:
      `sequelize.query('SELECT * FROM projects WHERE status = ?', {
      replacements: ['active'], type: QueryTypes.SELECT });`"
    metadata:
      references:
        - https://sequelize.org/master/manual/raw-queries.html
      category: security
      owasp:
        - A01:2017 - Injection
        - A03:2021 - Injection
      cwe:
        - "CWE-89: Improper Neutralization of Special Elements used in an SQL
          Command ('SQL Injection')"
      technology:
        - aws-lambda
        - sequelize
      cwe2022-top25: true
      cwe2021-top25: true
      subcategory:
        - vuln
      likelihood: MEDIUM
      impact: HIGH
      confidence: MEDIUM
      license: Semgrep Rules License v1.0. For more details, visit
        semgrep.dev/legal/rules-license
      vulnerability_class:
        - SQL Injection
    languages:
      - javascript
      - typescript
    severity: WARNING
    mode: taint
    pattern-sources:
      - patterns:
          - pattern-either:
              - pattern-inside: |
                  exports.handler = function ($EVENT, ...) {
                    ...
                  }
              - pattern-inside: |
                  function $FUNC ($EVENT, ...) {...}
                  ...
                  exports.handler = $FUNC
              - pattern-inside: |
                  $FUNC = function ($EVENT, ...) {...}
                  ...
                  exports.handler = $FUNC
          - pattern: $EVENT
    pattern-sinks:
      - patterns:
          - focus-metavariable: $QUERY
          - pattern-either:
              - pattern: $DB.query($QUERY, ...)
          - pattern-either:
              - pattern-inside: |
                  require('sequelize')
                  ...
              - pattern-inside: |
                  import 'sequelize'
                  ...

  - id: js-open-redirect
    message: The application accepts potentially user-controlled input `$PROP` which
      can control the location of the current window context. This can lead two
      types of vulnerabilities open-redirection and Cross-Site-Scripting (XSS)
      with JavaScript URIs. It is recommended to validate user-controllable
      input before allowing it to control the redirection.
    options:
      interfile: true
    metadata:
      interfile: true
      cwe:
        - "CWE-601: URL Redirection to Untrusted Site ('Open Redirect')"
      owasp:
        - A01:2021 - Broken Access Control
      asvs:
        section: V5 Validation, Sanitization and Encoding
        control_id: 5.5.1 Insecue Redirect
        control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v51-input-validation
        version: "4"
      category: security
      confidence: HIGH
      references:
        - https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html
      technology:
        - browser
      subcategory:
        - vuln
      likelihood: HIGH
      impact: MEDIUM
      license: Semgrep Rules License v1.0. For more details, visit
        semgrep.dev/legal/rules-license
      vulnerability_class:
        - Open Redirect
    languages:
      - javascript
      - typescript
    severity: WARNING
    mode: taint
    pattern-sources:
      - patterns:
          - pattern-either:
              - pattern-inside: >
                  $PROP = new URLSearchParams($WINDOW. ...
                  .location.search).get('...')

                  ...
              - pattern-inside: |
                  $PROP = new URLSearchParams(location.search).get('...')
                  ...
              - pattern-inside: >
                  $PROP = new URLSearchParams($WINDOW. ...
                  .location.hash.substring(1)).get('...')

                  ...
              - pattern-inside: >
                  $PROP = new
                  URLSearchParams(location.hash.substring(1)).get('...')

                  ...
          - pattern: $PROP
      - patterns:
          - pattern-either:
              - pattern-inside: |
                  $PROPS = new URLSearchParams($WINDOW. ... .location.search)
                  ...
              - pattern-inside: |
                  $PROPS = new URLSearchParams(location.search)
                  ...
              - pattern-inside: >
                  $PROPS = new URLSearchParams($WINDOW. ...
                  .location.hash.substring(1))

                  ...
              - pattern-inside: |
                  $PROPS = new URLSearchParams(location.hash.substring(1))
                  ...
          - pattern: $PROPS.get('...')
      - patterns:
          - pattern-either:
              - pattern-inside: |
                  $PROPS = new URL($WINDOW. ... .location.href)
                  ...
              - pattern-inside: |
                  $PROPS = new URL(location.href)
                  ...
          - pattern: $PROPS.searchParams.get('...')
      - patterns:
          - pattern-either:
              - pattern-inside: >
                  $PROPS = new URL($WINDOW. ...
                  .location.href).searchParams.get('...')

                  ...
              - pattern-inside: |
                  $PROPS = new URL(location.href).searchParams.get('...')
                  ...
          - pattern: $PROPS
    pattern-sinks:
      - patterns:
          - pattern-either:
              - pattern: location.href = $SINK
              - pattern: $THIS. ... .location.href = $SINK
              - pattern: location.replace($SINK)
              - pattern: $THIS. ... .location.replace($SINK)
              - pattern: location = $SINK
              - pattern: $WINDOW. ... .location = $SINK
          - focus-metavariable: $SINK
          - metavariable-pattern:
              patterns:
                - pattern-not: |
                    "..." + $VALUE
                - pattern-not: |
                    `...${$VALUE}`
              metavariable: $SINK

  - id: wildcard-postmessage-configuration
    message: The target origin of the window.postMessage() API is set to "*". This
      could allow for information disclosure due to the possibility of any
      origin allowed to receive the message.
    metadata:
      owasp:
        - A08:2021 - Software and Data Integrity Failures
      cwe:
        - "CWE-345: Insufficient Verification of Data Authenticity"
      category: security
      technology:
        - browser
      subcategory:
        - audit
      likelihood: HIGH
      impact: MEDIUM
      confidence: MEDIUM
      references:
        - https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures
      license: Semgrep Rules License v1.0. For more details, visit
        semgrep.dev/legal/rules-license
      vulnerability_class:
        - Improper Authentication
    languages:
      - javascript
      - typescript
    severity: WARNING
    pattern: $OBJECT.postMessage(...,'*')

  - id: express-check-directory-listing
    message: Directory listing/indexing is enabled, which may lead to disclosure of
      sensitive directories and files. It is recommended to disable directory
      listing unless it is a public resource. If you need directory listing,
      ensure that sensitive files are inaccessible when querying the resource.
    options:
      interfile: true
    metadata:
      interfile: true
      cwe:
        - "CWE-548: Exposure of Information Through Directory Listing"
      owasp:
        - A06:2017 - Security Misconfiguration
        - A01:2021 - Broken Access Control
      category: security
      technology:
        - express
      references:
        - https://www.npmjs.com/package/serve-index
        - https://www.acunetix.com/blog/articles/directory-listing-information-disclosure/
      subcategory:
        - vuln
      likelihood: HIGH
      impact: MEDIUM
      confidence: MEDIUM
      license: Semgrep Rules License v1.0. For more details, visit
        semgrep.dev/legal/rules-license
      vulnerability_class:
        - Mishandled Sensitive Information
    languages:
      - javascript
      - typescript
    severity: WARNING
    patterns:
      - pattern-either:
          - pattern: |
              $APP.use(require('serve-index')(...))
          - patterns:
              - pattern-either:
                  - pattern-inside: |
                      $SERVEINDEX = require('serve-index')
                      ...
                  - pattern-inside: |
                      import $SERVEINDEX from 'serve-index'
                      ...
                  - pattern-inside: |
                      import * as $SERVEINDEX from 'serve-index'
                      ...
              - pattern-either:
                  - patterns:
                      - pattern-inside: |
                          $VALUE = $SERVEINDEX(...)
                          ...
                      - pattern: |
                          $VALUE(...)
                  - pattern: |
                      $APP.use(..., $SERVEINDEX(...), ...)

  - id: express-cookie-session-no-domain
    message: "Default session middleware settings: `domain` not set. It indicates
      the domain of the cookie; use it to compare against the domain of the
      server in which the URL is being requested. If they match, then check the
      path attribute next."
    severity: WARNING
    languages:
      - javascript
      - typescript
    metadata:
      cwe:
        - "CWE-522: Insufficiently Protected Credentials"
      owasp:
        - A02:2017 - Broken Authentication
        - A04:2021 - Insecure Design
      source-rule-url: https://expressjs.com/en/advanced/best-practice-security.html
      category: security
      technology:
        - express
      cwe2021-top25: true
      subcategory:
        - vuln
      likelihood: HIGH
      impact: LOW
      confidence: MEDIUM
      references:
        - https://owasp.org/Top10/A04_2021-Insecure_Design
      license: Semgrep Rules License v1.0. For more details, visit
        semgrep.dev/legal/rules-license
      vulnerability_class:
        - Cryptographic Issues
    patterns:
      - pattern-either:
          - pattern-inside: |
              $SESSION = require('cookie-session');
              ...
          - pattern-inside: |
              $SESSION = require('express-session');
              ...
      - pattern: $SESSION(...)
      - pattern-not-inside: $SESSION(<... {cookie:{domain:...}} ...>,...)
      - pattern-not-inside: |
          $OPTS = <... {cookie:{domain:...}} ...>;
          ...
          $SESSION($OPTS,...);
      - pattern-not-inside: |
          $OPTS = ...;
          ...
          $COOKIE = <... {domain:...} ...>;
          ...
          $SESSION($OPTS,...);
      - pattern-not-inside: |
          $OPTS = ...;
          ...
          $OPTS.cookie = <... {domain:...} ...>;
          ...
          $SESSION($OPTS,...);
      - pattern-not-inside: |
          $OPTS = ...;
          ...
          $COOKIE.domain = ...;
          ...
          $SESSION($OPTS,...);
      - pattern-not-inside: |
          $OPTS = ...;
          ...
          $OPTS.cookie.domain = ...;
          ...
          $SESSION($OPTS,...);

  - id: express-cookie-session-no-secure
    message: "Default session middleware settings: `secure` not set. It ensures the
      browser only sends the cookie over HTTPS."
    severity: WARNING
    languages:
      - javascript
      - typescript
    metadata:
      cwe:
        - "CWE-522: Insufficiently Protected Credentials"
      owasp:
        - A02:2017 - Broken Authentication
        - A04:2021 - Insecure Design
      source-rule-url: https://expressjs.com/en/advanced/best-practice-security.html
      category: security
      technology:
        - express
      cwe2021-top25: true
      subcategory:
        - vuln
      likelihood: HIGH
      impact: LOW
      confidence: MEDIUM
      references:
        - https://owasp.org/Top10/A04_2021-Insecure_Design
      license: Semgrep Rules License v1.0. For more details, visit
        semgrep.dev/legal/rules-license
      vulnerability_class:
        - Cryptographic Issues
    patterns:
      - pattern-either:
          - pattern-inside: |
              $SESSION = require('cookie-session');
              ...
          - pattern-inside: |
              $SESSION = require('express-session');
              ...
      - pattern: $SESSION(...)
      - pattern-not-inside: $SESSION(<... {cookie:{secure:true}} ...>,...)
      - pattern-not-inside: |
          $OPTS = <... {cookie:{secure:true}} ...>;
          ...
          $SESSION($OPTS,...);
      - pattern-not-inside: |
          $OPTS = ...;
          ...
          $COOKIE = <... {secure:true} ...>;
          ...
          $SESSION($OPTS,...);
      - pattern-not-inside: |
          $OPTS = ...;
          ...
          $OPTS.cookie = <... {secure:true} ...>;
          ...
          $SESSION($OPTS,...);
      - pattern-not-inside: |
          $OPTS = ...;
          ...
          $COOKIE.secure = true;
          ...
          $SESSION($OPTS,...);
      - pattern-not-inside: |
          $OPTS = ...;
          ...
          $OPTS.cookie.secure = true;
          ...
          $SESSION($OPTS,...);

  - id: express-path-join-resolve-traversal
    message: Possible writing outside of the destination, make sure that the target
      path is nested in the intended destination
    metadata:
      owasp:
        - A05:2017 - Broken Access Control
        - A01:2021 - Broken Access Control
      cwe:
        - "CWE-22: Improper Limitation of a Pathname to a Restricted Directory
          ('Path Traversal')"
      category: security
      references:
        - https://owasp.org/www-community/attacks/Path_Traversal
      technology:
        - express
        - node.js
      cwe2022-top25: true
      cwe2021-top25: true
      subcategory:
        - vuln
      likelihood: HIGH
      impact: MEDIUM
      confidence: MEDIUM
      license: Semgrep Rules License v1.0. For more details, visit
        semgrep.dev/legal/rules-license
      vulnerability_class:
        - Path Traversal
    languages:
      - javascript
      - typescript
    severity: WARNING
    mode: taint
    pattern-sources:
      - patterns:
          - pattern-either:
              - pattern-inside: function ... ($REQ, $RES) {...}
              - pattern-inside: function ... ($REQ, $RES, $NEXT) {...}
              - patterns:
                  - pattern-either:
                      - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES) {...})
                      - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES, $NEXT) {...})
                  - metavariable-regex:
                      metavariable: $METHOD
                      regex: ^(get|post|put|head|delete|options)$
          - pattern-either:
              - pattern: $REQ.query
              - pattern: $REQ.body
              - pattern: $REQ.params
              - pattern: $REQ.cookies
              - pattern: $REQ.headers
      - patterns:
          - pattern-either:
              - pattern-inside: |
                  ({ $REQ }: Request,$RES: Response, $NEXT: NextFunction) =>
                  {...}
              - pattern-inside: |
                  ({ $REQ }: Request,$RES: Response) => {...}
          - focus-metavariable: $REQ
          - pattern-either:
              - pattern: params
              - pattern: query
              - pattern: cookies
              - pattern: headers
              - pattern: body
    pattern-sinks:
      - patterns:
          - focus-metavariable: $SINK
          - pattern-either:
              - pattern-inside: |
                  $PATH = require('path');
                  ...
              - pattern-inside: |
                  import $PATH from 'path';
                  ...
          - pattern-either:
              - pattern: $PATH.join(...,$SINK,...)
              - pattern: $PATH.resolve(...,$SINK,...)
      - patterns:
          - focus-metavariable: $SINK
          - pattern-inside: |
              import 'path';
              ...
          - pattern-either:
              - pattern: path.join(...,$SINK,...)
              - pattern: path.resolve(...,$SINK,...)
    pattern-sanitizers:
      - pattern: $Y.replace(...)
      - pattern: $Y.indexOf(...)
      - pattern: |
          function ... (...) {
              ...
              <... $Y.indexOf(...) ...>
              ...
          }
      - patterns:
          - pattern: $FUNC(...)
          - metavariable-regex:
              metavariable: $FUNC
              regex: sanitize

  - id: express-res-sendfile
    message: The application processes user-input, this is passed to res.sendFile
      which can allow an attacker to arbitrarily read files on the system
      through path traversal. It is recommended to perform input validation in
      addition to canonicalizing the path. This allows you to validate the path
      against the intended directory it should be accessing.
    metadata:
      references:
        - https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html
      technology:
        - express
      category: security
      cwe:
        - "CWE-73: External Control of File Name or Path"
      owasp:
        - A04:2021 - Insecure Design
      subcategory:
        - vuln
      likelihood: HIGH
      impact: MEDIUM
      confidence: MEDIUM
      license: Semgrep Rules License v1.0. For more details, visit
        semgrep.dev/legal/rules-license
      vulnerability_class:
        - Path Traversal
    languages:
      - javascript
      - typescript
    severity: WARNING
    mode: taint
    pattern-sources:
      - patterns:
          - pattern-either:
              - pattern-inside: function ... ($REQ, $RES) {...}
              - pattern-inside: function ... ($REQ, $RES, $NEXT) {...}
              - patterns:
                  - pattern-either:
                      - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES) {...})
                      - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES, $NEXT) {...})
                  - metavariable-regex:
                      metavariable: $METHOD
                      regex: ^(get|post|put|head|delete|options)$
          - pattern-either:
              - pattern: $REQ.query
              - pattern: $REQ.body
              - pattern: $REQ.params
              - pattern: $REQ.cookies
              - pattern: $REQ.headers
      - patterns:
          - pattern-either:
              - pattern-inside: |
                  ({ $REQ }: Request,$RES: Response, $NEXT: NextFunction) =>
                  {...}
              - pattern-inside: |
                  ({ $REQ }: Request,$RES: Response) => {...}
          - pattern-either:
              - pattern: params
              - pattern: query
              - pattern: cookies
              - pattern: headers
              - pattern: body
      - patterns:
          - pattern-either:
              - patterns:
                  - pattern-either:
                      - pattern-inside: |
                          function ... (...,$REQ: $TYPE, ...) {...}
                  - metavariable-regex:
                      metavariable: $TYPE
                      regex: ^(string|String)
    pattern-sinks:
      - patterns:
          - pattern-either:
              - pattern: $RES.$METH($QUERY,...)
          - pattern-not-inside: $RES.$METH($QUERY,$OPTIONS)
          - metavariable-regex:
              metavariable: $METH
              regex: ^(sendfile|sendFile)$
          - focus-metavariable: $QUERY

  - id: express-third-party-object-deserialization
    message: The following function call $SER.$FUNC accepts user controlled data
      which can result in Remote Code Execution (RCE) through Object
      Deserialization. It is recommended to use secure data processing
      alternatives such as JSON.parse() and Buffer.from().
    options:
      interfile: true
    metadata:
      interfile: true
      technology:
        - express
      category: security
      cwe:
        - "CWE-502: Deserialization of Untrusted Data"
      references:
        - https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html
      source_rule_url:
        - https://github.com/ajinabraham/njsscan/blob/75bfbeb9c8d72999e4d527dfa2548f7f0f3cc48a/njsscan/rules/semantic_grep/eval/eval_deserialize.yaml
      owasp:
        - A08:2017 - Insecure Deserialization
        - A08:2021 - Software and Data Integrity Failures
      cwe2022-top25: true
      cwe2021-top25: true
      subcategory:
        - vuln
      likelihood: HIGH
      impact: HIGH
      confidence: HIGH
      license: Semgrep Rules License v1.0. For more details, visit
        semgrep.dev/legal/rules-license
      vulnerability_class:
        - "Insecure Deserialization "
    languages:
      - javascript
      - typescript
    severity: WARNING
    mode: taint
    pattern-sources:
      - patterns:
          - pattern-either:
              - pattern-inside: function ... ($REQ, $RES) {...}
              - pattern-inside: function ... ($REQ, $RES, $NEXT) {...}
              - patterns:
                  - pattern-either:
                      - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES) {...})
                      - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES, $NEXT) {...})
                  - metavariable-regex:
                      metavariable: $METHOD
                      regex: ^(get|post|put|head|delete|options)$
          - pattern-either:
              - pattern: $REQ.query
              - pattern: $REQ.body
              - pattern: $REQ.params
              - pattern: $REQ.cookies
              - pattern: $REQ.headers
              - pattern: $REQ.files.$ANYTHING.data.toString('utf8')
              - pattern: $REQ.files.$ANYTHING['data'].toString('utf8')
      - patterns:
          - pattern-either:
              - pattern-inside: |
                  ({ $REQ }: Request,$RES: Response, $NEXT: NextFunction) =>
                  {...}
              - pattern-inside: |
                  ({ $REQ }: Request,$RES: Response) => {...}
          - focus-metavariable: $REQ
          - pattern-either:
              - pattern: params
              - pattern: query
              - pattern: cookies
              - pattern: headers
              - pattern: body
              - pattern: files.$ANYTHING.data.toString('utf8')
              - pattern: files.$ANYTHING['data'].toString('utf8')
    pattern-sinks:
      - pattern-either:
          - patterns:
              - pattern-either:
                  - pattern-inside: |
                      $SER = require('$IMPORT')
                      ...
                  - pattern-inside: |
                      import $SER from '$IMPORT'
                       ...
                  - pattern-inside: |
                      import * as $SER from '$IMPORT'
                      ...
              - metavariable-regex:
                  metavariable: $IMPORT
                  regex: ^(node-serialize|serialize-to-js)$
              - pattern: $SER.$FUNC(...)
              - metavariable-regex:
                  metavariable: $FUNC
                  regex: ^(unserialize|deserialize)$

  - id: express-expat-xxe
    message: Make sure that unverified user data can not reach the XML Parser, as it
      can result in XML External or Internal Entity (XXE) Processing
      vulnerabilities.
    options:
      interfile: true
    metadata:
      interfile: true
      owasp:
        - A04:2017 - XML External Entities (XXE)
        - A05:2021 - Security Misconfiguration
      cwe:
        - "CWE-611: Improper Restriction of XML External Entity Reference"
      asvs:
        section: V5 Validation, Sanitization and Encoding
        control_id: 5.5.2 Insecue XML Deserialization
        control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v55-deserialization-prevention
        version: "4"
      references:
        - https://github.com/astro/node-expat
      category: security
      technology:
        - express
      cwe2022-top25: true
      cwe2021-top25: true
      subcategory:
        - vuln
      likelihood: MEDIUM
      impact: MEDIUM
      confidence: MEDIUM
      license: Semgrep Rules License v1.0. For more details, visit
        semgrep.dev/legal/rules-license
      vulnerability_class:
        - XML Injection
    languages:
      - javascript
      - typescript
    severity: ERROR
    mode: taint
    pattern-sources:
      - patterns:
          - pattern-either:
              - pattern-inside: function ... ($REQ, $RES) {...}
              - pattern-inside: function ... ($REQ, $RES, $NEXT) {...}
              - patterns:
                  - pattern-either:
                      - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES) {...})
                      - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES, $NEXT) {...})
                  - metavariable-regex:
                      metavariable: $METHOD
                      regex: ^(get|post|put|head|delete|options)$
          - pattern-either:
              - pattern: $REQ.query
              - pattern: $REQ.body
              - pattern: $REQ.params
              - pattern: $REQ.cookies
              - pattern: $REQ.headers
      - patterns:
          - pattern-either:
              - pattern-inside: |
                  ({ $REQ }: Request,$RES: Response, $NEXT: NextFunction) =>
                  {...}
              - pattern-inside: |
                  ({ $REQ }: Request,$RES: Response) => {...}
          - focus-metavariable: $REQ
          - pattern-either:
              - pattern: params
              - pattern: query
              - pattern: cookies
              - pattern: headers
              - pattern: body
    pattern-sinks:
      - patterns:
          - pattern-either:
              - pattern-inside: |
                  $XML = require('node-expat')
                  ...
              - pattern-inside: |
                  import $XML from 'node-expat'
                  ...
              - pattern-inside: |
                  import * as $XML from 'node-expat'
                  ...
          - pattern-either:
              - pattern-inside: |
                  $PARSER = new $XML.Parser(...);
                  ...
          - pattern-either:
              - pattern: $PARSER.parse($QUERY)
              - pattern: $PARSER.write($QUERY)
          - focus-metavariable: $QUERY

  - id: express-insecure-template-usage
    message: User data from `$REQ` is being compiled into the template, which can
      lead to a Server Side Template Injection (SSTI) vulnerability.
    options:
      interfile: true
    metadata:
      interfile: true
      category: security
      cwe:
        - "CWE-1336: Improper Neutralization of Special Elements Used in a
          Template Engine"
      owasp:
        - A03:2021 - Injection
        - A01:2017 - Injection
      references:
        - https://cheatsheetseries.owasp.org/cheatsheets/Injection_Prevention_Cheat_Sheet.html
      technology:
        - javascript
        - typescript
        - express
        - pug
        - jade
        - dot
        - ejs
        - nunjucks
        - lodash
        - handlbars
        - mustache
        - hogan.js
        - eta
        - squirrelly
      source_rule_url:
        - https://github.com/github/codeql/blob/2ba2642c7ab29b9eedef33bcc2b8cd1d203d0c10/javascript/ql/test/query-tests/Security/CWE-094/CodeInjection/template-sinks.js
      subcategory:
        - vuln
      likelihood: MEDIUM
      impact: MEDIUM
      confidence: MEDIUM
      license: Semgrep Rules License v1.0. For more details, visit
        semgrep.dev/legal/rules-license
      vulnerability_class:
        - Code Injection
    languages:
      - javascript
      - typescript
    severity: WARNING
    mode: taint
    pattern-propagators:
      - pattern: $MODEL.$FIND($E).then((...,$S,...)=>{...})
        from: $E
        to: $S
    pattern-sources:
      - patterns:
          - pattern-either:
              - pattern-inside: function ... ($REQ, $RES) {...}
              - pattern-inside: function ... ($REQ, $RES, $NEXT) {...}
              - patterns:
                  - pattern-either:
                      - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES) {...})
                      - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES, $NEXT) {...})
                  - metavariable-regex:
                      metavariable: $METHOD
                      regex: ^(get|post|put|head|delete|options)$
          - pattern-either:
              - pattern: $REQ.query
              - pattern: $REQ.body
              - pattern: $REQ.params
              - pattern: $REQ.cookies
              - pattern: $REQ.headers
      - patterns:
          - pattern-either:
              - pattern-inside: |
                  ({ $REQ }: Request,$RES: Response, $NEXT: NextFunction) =>
                  {...}
              - pattern-inside: |
                  ({ $REQ }: Request,$RES: Response) => {...}
          - focus-metavariable: $REQ
          - pattern-either:
              - pattern: params
              - pattern: query
              - pattern: cookies
              - pattern: headers
              - pattern: body
    pattern-sinks:
      - pattern-either:
          - patterns:
              - pattern-either:
                  - pattern-inside: |
                      $PUG = require('pug')
                      ...
                  - pattern-inside: |
                      import * as $PUG from 'pug'
                      ...
                  - pattern-inside: |
                      $PUG = require('jade')
                      ...
                  - pattern-inside: |
                      import * as $PUG from 'jade'
                      ...
              - pattern-either:
                  - pattern: $PUG.compile(...)
                  - pattern: $PUG.compileClient(...)
                  - pattern: $PUG.compileClientWithDependenciesTracked(...)
                  - pattern: $PUG.render(...)
          - patterns:
              - pattern-either:
                  - pattern-inside: |
                      $PUG = require('dot')
                      ...
                  - pattern-inside: |
                      import * as $PUG from 'dot'
                      ...
              - pattern-either:
                  - pattern: $PUG.template(...)
                  - pattern: $PUG.compile(...)
          - patterns:
              - pattern-either:
                  - pattern-inside: |
                      $PUG = require('ejs')
                      ...
                  - pattern-inside: |
                      import * as $PUG from 'ejs'
                      ...
              - pattern-either:
                  - pattern: $PUG.render(...)
          - patterns:
              - pattern-either:
                  - pattern-inside: |
                      $PUG = require('nunjucks')
                      ...
                  - pattern-inside: |
                      import * as $PUG from 'nunjucks'
                      ...
              - pattern-either:
                  - pattern: $PUG.renderString(...)
          - patterns:
              - pattern-either:
                  - pattern-inside: |
                      $PUG = require('lodash')
                      ...
                  - pattern-inside: |
                      import * as $PUG from 'lodash'
                      ...
              - pattern-either:
                  - pattern: $PUG.template(...)
          - patterns:
              - pattern-either:
                  - pattern-inside: |
                      $PUG = require('mustache')
                      ...
                  - pattern-inside: |
                      import * as $PUG from 'mustache'
                      ...
                  - pattern-inside: |
                      $PUG = require('eta')
                      ...
                  - pattern-inside: |
                      import * as $PUG from 'eta'
                      ...
                  - pattern-inside: |
                      $PUG = require('squirrelly')
                      ...
                  - pattern-inside: |
                      import * as $PUG from 'squirrelly'
                      ...
              - pattern-either:
                  - pattern: $PUG.render(...)
          - patterns:
              - pattern-either:
                  - pattern-inside: |
                      $PUG = require('hogan.js')
                      ...
                  - pattern-inside: |
                      import * as $PUG from 'hogan.js'
                      ...
                  - pattern-inside: |
                      $PUG = require('handlebars')
                      ...
                  - pattern-inside: |
                      import * as $PUG from 'handlebars'
                      ...
              - pattern-either:
                  - pattern: $PUG.compile(...)

  - id: express-jwt-hardcoded-secret
    message: A hard-coded credential was detected. It is not recommended to store
      credentials in source-code, as this risks secrets being leaked and used by
      either an internal or external malicious adversary. It is recommended to
      use environment variables to securely provide credentials or retrieve
      credentials from a secure vault or HSM (Hardware Security Module).
    options:
      interfile: true
    metadata:
      interfile: true
      cwe:
        - "CWE-798: Use of Hard-coded Credentials"
      references:
        - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html
      owasp:
        - A07:2021 - Identification and Authentication Failures
      category: security
      technology:
        - express
        - secrets
      cwe2022-top25: true
      cwe2021-top25: true
      subcategory:
        - audit
      likelihood: HIGH
      impact: MEDIUM
      confidence: HIGH
      license: Semgrep Rules License v1.0. For more details, visit
        semgrep.dev/legal/rules-license
      vulnerability_class:
        - Hard-coded Secrets
    languages:
      - javascript
      - typescript
    severity: WARNING
    patterns:
      - pattern-either:
          - pattern-inside: |
              $JWT = require('express-jwt');
              ...
          - pattern-inside: |
              import $JWT from 'express-jwt';
              ...
          - pattern-inside: |
              import * as $JWT from 'express-jwt';
              ...
          - pattern-inside: |
              import { ..., $JWT, ... } from 'express-jwt';
              ...
      - pattern-either:
          - pattern: |
              $JWT({...,secret: "$Y",...},...)
          - pattern: |
              $OPTS = "$Y";
              ...
              $JWT({...,secret: $OPTS},...);
      - focus-metavariable: $Y

  - id: express-phantom-injection
    message: If unverified user data can reach the `phantom` methods it can result
      in Server-Side Request Forgery vulnerabilities
    metadata:
      owasp:
        - A10:2021 - Server-Side Request Forgery (SSRF)
      cwe:
        - "CWE-918: Server-Side Request Forgery (SSRF)"
      category: security
      technology:
        - express
      references:
        - https://phantomjs.org/page-automation.html
      cwe2022-top25: true
      cwe2021-top25: true
      subcategory:
        - vuln
      likelihood: MEDIUM
      impact: MEDIUM
      confidence: MEDIUM
      license: Semgrep Rules License v1.0. For more details, visit
        semgrep.dev/legal/rules-license
      vulnerability_class:
        - Server-Side Request Forgery (SSRF)
    languages:
      - javascript
      - typescript
    severity: ERROR
    mode: taint
    pattern-sources:
      - patterns:
          - pattern-either:
              - pattern-inside: function ... ($REQ, $RES) {...}
              - pattern-inside: function ... ($REQ, $RES, $NEXT) {...}
              - patterns:
                  - pattern-either:
                      - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES) {...})
                      - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES, $NEXT) {...})
                  - metavariable-regex:
                      metavariable: $METHOD
                      regex: ^(get|post|put|head|delete|options)$
          - pattern-either:
              - pattern: $REQ.query
              - pattern: $REQ.body
              - pattern: $REQ.params
              - pattern: $REQ.cookies
              - pattern: $REQ.headers
      - patterns:
          - pattern-either:
              - pattern-inside: |
                  ({ $REQ }: Request,$RES: Response, $NEXT: NextFunction) =>
                  {...}
              - pattern-inside: |
                  ({ $REQ }: Request,$RES: Response) => {...}
          - focus-metavariable: $REQ
          - pattern-either:
              - pattern: params
              - pattern: query
              - pattern: cookies
              - pattern: headers
              - pattern: body
    pattern-sinks:
      - patterns:
          - pattern-either:
              - pattern-inside: |
                  require('phantom');
                  ...
              - pattern-inside: |
                  import 'phantom';
                  ...
          - pattern-either:
              - pattern: $PAGE.open($SINK,...)
              - pattern: $PAGE.setContent($SINK,...)
              - pattern: $PAGE.openUrl($SINK,...)
              - pattern: $PAGE.evaluateJavaScript($SINK,...)
              - pattern: $PAGE.property("content",$SINK,...)
          - focus-metavariable: $SINK

  - id: express-puppeteer-injection
    message: If unverified user data can reach the `puppeteer` methods it can result
      in Server-Side Request Forgery vulnerabilities
    metadata:
      owasp:
        - A10:2021 - Server-Side Request Forgery (SSRF)
      cwe:
        - "CWE-918: Server-Side Request Forgery (SSRF)"
      category: security
      technology:
        - express
      references:
        - https://pptr.dev/api/puppeteer.page
      cwe2022-top25: true
      cwe2021-top25: true
      subcategory:
        - vuln
      likelihood: MEDIUM
      impact: MEDIUM
      confidence: MEDIUM
      license: Semgrep Rules License v1.0. For more details, visit
        semgrep.dev/legal/rules-license
      vulnerability_class:
        - Server-Side Request Forgery (SSRF)
    languages:
      - javascript
      - typescript
    severity: ERROR
    mode: taint
    pattern-sources:
      - patterns:
          - pattern-either:
              - pattern-inside: function ... ($REQ, $RES) {...}
              - pattern-inside: function ... ($REQ, $RES, $NEXT) {...}
              - patterns:
                  - pattern-either:
                      - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES) {...})
                      - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES, $NEXT) {...})
                  - metavariable-regex:
                      metavariable: $METHOD
                      regex: ^(get|post|put|head|delete|options)$
          - pattern-either:
              - pattern: $REQ.query
              - pattern: $REQ.body
              - pattern: $REQ.params
              - pattern: $REQ.cookies
              - pattern: $REQ.headers
      - patterns:
          - pattern-either:
              - pattern-inside: |
                  ({ $REQ }: Request,$RES: Response, $NEXT: NextFunction) =>
                  {...}
              - pattern-inside: |
                  ({ $REQ }: Request,$RES: Response) => {...}
          - focus-metavariable: $REQ
          - pattern-either:
              - pattern: params
              - pattern: query
              - pattern: cookies
              - pattern: headers
              - pattern: body
    pattern-sinks:
      - patterns:
          - pattern-either:
              - pattern-inside: |
                  require('puppeteer');
                  ...
              - pattern-inside: |
                  import 'puppeteer';
                  ...
          - pattern-either:
              - pattern: $PAGE.goto($SINK,...)
              - pattern: $PAGE.setContent($SINK,...)
              - pattern: $PAGE.evaluate($SINK,...)
              - pattern: $PAGE.evaluate($CODE,$SINK,...)
              - pattern: $PAGE.evaluateHandle($SINK,...)
              - pattern: $PAGE.evaluateHandle($CODE,$SINK,...)
              - pattern: $PAGE.evaluateOnNewDocument($SINK,...)
              - pattern: $PAGE.evaluateOnNewDocument($CODE,$SINK,...)
          - focus-metavariable: $SINK

  - id: express-sandbox-code-injection
    message: Make sure that unverified user data can not reach `sandbox`.
    metadata:
      owasp:
        - A03:2021 - Injection
      references:
        - https://cheatsheetseries.owasp.org/cheatsheets/Injection_Prevention_Cheat_Sheet.html
      cwe:
        - "CWE-94: Improper Control of Generation of Code ('Code Injection')"
      category: security
      technology:
        - express
      cwe2022-top25: true
      subcategory:
        - vuln
      likelihood: MEDIUM
      impact: MEDIUM
      confidence: MEDIUM
      license: Semgrep Rules License v1.0. For more details, visit
        semgrep.dev/legal/rules-license
      vulnerability_class:
        - Code Injection
    languages:
      - javascript
      - typescript
    severity: ERROR
    mode: taint
    pattern-sources:
      - patterns:
          - pattern-either:
              - pattern-inside: function ... ($REQ, $RES) {...}
              - pattern-inside: function ... ($REQ, $RES, $NEXT) {...}
              - patterns:
                  - pattern-either:
                      - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES) {...})
                      - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES, $NEXT) {...})
                  - metavariable-regex:
                      metavariable: $METHOD
                      regex: ^(get|post|put|head|delete|options)$
          - pattern-either:
              - pattern: $REQ.query
              - pattern: $REQ.body
              - pattern: $REQ.params
              - pattern: $REQ.cookies
              - pattern: $REQ.headers
      - patterns:
          - pattern-either:
              - pattern-inside: |
                  ({ $REQ }: Request,$RES: Response, $NEXT: NextFunction) =>
                  {...}
              - pattern-inside: |
                  ({ $REQ }: Request,$RES: Response) => {...}
          - focus-metavariable: $REQ
          - pattern-either:
              - pattern: params
              - pattern: query
              - pattern: cookies
              - pattern: headers
              - pattern: body
    pattern-sinks:
      - patterns:
          - pattern-inside: |
              $SANDBOX = require('sandbox');
              ...
          - pattern-either:
              - patterns:
                  - pattern-inside: |
                      $S = new $SANDBOX(...);
                      ...
                  - pattern: |
                      $S.run(...)
              - pattern: |
                  new $SANDBOX($OPTS).run(...)
              - pattern: new $SANDBOX().run(...)

  - id: express-vm-injection
    message: Make sure that unverified user data can not reach `$VM`.
    metadata:
      owasp:
        - A03:2021 - Injection
      references:
        - https://cheatsheetseries.owasp.org/cheatsheets/Injection_Prevention_Cheat_Sheet.html
      cwe:
        - "CWE-94: Improper Control of Generation of Code ('Code Injection')"
      category: security
      technology:
        - express
      cwe2022-top25: true
      subcategory:
        - vuln
      likelihood: MEDIUM
      impact: MEDIUM
      confidence: MEDIUM
      license: Semgrep Rules License v1.0. For more details, visit
        semgrep.dev/legal/rules-license
      vulnerability_class:
        - Code Injection
    languages:
      - javascript
      - typescript
    severity: ERROR
    mode: taint
    pattern-sources:
      - patterns:
          - pattern-either:
              - pattern-inside: function ... ($REQ, $RES) {...}
              - pattern-inside: function ... ($REQ, $RES, $NEXT) {...}
              - patterns:
                  - pattern-either:
                      - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES) {...})
                      - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES, $NEXT) {...})
                  - metavariable-regex:
                      metavariable: $METHOD
                      regex: ^(get|post|put|head|delete|options)$
          - pattern-either:
              - pattern: $REQ.query
              - pattern: $REQ.body
              - pattern: $REQ.params
              - pattern: $REQ.cookies
              - pattern: $REQ.headers
      - patterns:
          - pattern-either:
              - pattern-inside: |
                  ({ $REQ }: Request,$RES: Response, $NEXT: NextFunction) =>
                  {...}
              - pattern-inside: |
                  ({ $REQ }: Request,$RES: Response) => {...}
          - focus-metavariable: $REQ
          - pattern-either:
              - pattern: params
              - pattern: query
              - pattern: cookies
              - pattern: headers
              - pattern: body
    pattern-sinks:
      - patterns:
          - pattern-inside: |
              $VM = require('vm');
              ...
          - pattern-either:
              - pattern: |
                  $VM.runInContext(...)
              - pattern: |
                  $VM.runInNewContext(...)
              - pattern: |
                  $VM.compileFunction(...)
              - pattern: |
                  $VM.runInThisContext(...)
              - pattern: new $VM.Script(...)

  - id: express-xml2json-xxe
    message: Make sure that unverified user data can not reach the XML Parser, as it
      can result in XML External or Internal Entity (XXE) Processing
      vulnerabilities
    metadata:
      owasp:
        - A04:2017 - XML External Entities (XXE)
        - A05:2021 - Security Misconfiguration
      cwe:
        - "CWE-611: Improper Restriction of XML External Entity Reference"
      asvs:
        section: V5 Validation, Sanitization and Encoding
        control_id: 5.5.2 Insecue XML Deserialization
        control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v55-deserialization-prevention
        version: "4"
      category: security
      technology:
        - express
      references:
        - https://www.npmjs.com/package/xml2json
      cwe2022-top25: true
      cwe2021-top25: true
      subcategory:
        - vuln
      likelihood: MEDIUM
      impact: MEDIUM
      confidence: MEDIUM
      license: Semgrep Rules License v1.0. For more details, visit
        semgrep.dev/legal/rules-license
      vulnerability_class:
        - XML Injection
    languages:
      - javascript
      - typescript
    severity: ERROR
    mode: taint
    pattern-sources:
      - patterns:
          - pattern-either:
              - pattern-inside: function ... ($REQ, $RES) {...}
              - pattern-inside: function ... ($REQ, $RES, $NEXT) {...}
              - patterns:
                  - pattern-either:
                      - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES) {...})
                      - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES, $NEXT) {...})
                  - metavariable-regex:
                      metavariable: $METHOD
                      regex: ^(get|post|put|head|delete|options)$
          - pattern-either:
              - pattern: $REQ.query
              - pattern: $REQ.body
              - pattern: $REQ.params
              - pattern: $REQ.cookies
              - pattern: $REQ.headers
              - pattern: $REQ.files.$ANYTHING.data.toString('utf8')
              - pattern: $REQ.files.$ANYTHING['data'].toString('utf8')
      - patterns:
          - pattern-either:
              - pattern-inside: |
                  ({ $REQ }: Request,$RES: Response, $NEXT: NextFunction) =>
                  {...}
              - pattern-inside: |
                  ({ $REQ }: Request,$RES: Response) => {...}
          - focus-metavariable: $REQ
          - pattern-either:
              - pattern: params
              - pattern: query
              - pattern: cookies
              - pattern: headers
              - pattern: body
              - pattern: files.$ANYTHING.data.toString('utf8')
              - pattern: files.$ANYTHING['data'].toString('utf8')
    pattern-sinks:
      - patterns:
          - pattern-either:
              - pattern-inside: |
                  require('xml2json');
                  ...
              - pattern-inside: |
                  import 'xml2json';
                  ...
          - pattern: $EXPAT.toJson($SINK,...)
          - focus-metavariable: $SINK

  - id: raw-html-format
    message: User data flows into the host portion of this manually-constructed
      HTML. This can introduce a Cross-Site-Scripting (XSS) vulnerability if
      this comes from user-provided input. Consider using a sanitization library
      such as DOMPurify to sanitize the HTML within.
    metadata:
      cwe:
        - "CWE-79: Improper Neutralization of Input During Web Page Generation
          ('Cross-site Scripting')"
      owasp:
        - A07:2017 - Cross-Site Scripting (XSS)
        - A03:2021 - Injection
      references:
        - https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html
      category: security
      technology:
        - express
      cwe2022-top25: true
      cwe2021-top25: true
      subcategory:
        - vuln
      likelihood: HIGH
      impact: MEDIUM
      confidence: MEDIUM
      license: Semgrep Rules License v1.0. For more details, visit
        semgrep.dev/legal/rules-license
      vulnerability_class:
        - Cross-Site-Scripting (XSS)
    languages:
      - javascript
      - typescript
    severity: WARNING
    mode: taint
    pattern-sources:
      - label: EXPRESS
        patterns:
          - pattern-either:
              - pattern-inside: function ... ($REQ, $RES) {...}
              - pattern-inside: function ... ($REQ, $RES, $NEXT) {...}
              - patterns:
                  - pattern-either:
                      - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES) {...})
                      - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES, $NEXT) {...})
                  - metavariable-regex:
                      metavariable: $METHOD
                      regex: ^(get|post|put|head|delete|options)$
          - pattern-either:
              - pattern: $REQ.query
              - pattern: $REQ.body
              - pattern: $REQ.params
              - pattern: $REQ.cookies
              - pattern: $REQ.headers
      - label: EXPRESSTS
        patterns:
          - pattern-either:
              - pattern-inside: |
                  ({ $REQ }: Request,$RES: Response, $NEXT: NextFunction) =>
                  {...}
              - pattern-inside: |
                  ({ $REQ }: Request,$RES: Response) => {...}
          - focus-metavariable: $REQ
          - pattern-either:
              - pattern: params
              - pattern: query
              - pattern: cookies
              - pattern: headers
              - pattern: body
      - label: CLEAN
        by-side-effect: true
        patterns:
          - pattern-either:
              - pattern: $A($SOURCE)
              - pattern: $SANITIZE. ... .$A($SOURCE)
              - pattern: $A. ... .$SANITIZE($SOURCE)
          - focus-metavariable: $SOURCE
          - metavariable-regex:
              metavariable: $A
              regex: (?i)(.*valid|.*sanitiz)
    pattern-sinks:
      - requires: (EXPRESS and not CLEAN) or (EXPRESSTS and not CLEAN)
        patterns:
          - pattern-either:
              - patterns:
                  - pattern-either:
                      - pattern: '"$HTMLSTR" + $EXPR'
                      - pattern: '"$HTMLSTR".concat(...)'
                      - pattern: util.format($HTMLSTR, ...)
                  - metavariable-pattern:
                      metavariable: $HTMLSTR
                      language: generic
                      pattern: <$TAG ...
              - patterns:
                  - pattern: |
                      `...`
                  - pattern-regex: |
                      .*<\w+.*

  - id: require-request
    message: If an attacker controls the x in require(x) then they can cause code to
      load that was not intended to run on the server.
    options:
      interfile: true
    metadata:
      interfile: true
      owasp:
        - A01:2021 - Broken Access Control
      cwe:
        - "CWE-706: Use of Incorrectly-Resolved Name or Reference"
      source-rule-url: https://nodesecroadmap.fyi/chapter-1/threat-UIR.html
      category: security
      technology:
        - express
      references:
        - https://github.com/google/node-sec-roadmap/blob/master/chapter-2/dynamism.md#dynamism-when-you-need-it
      subcategory:
        - vuln
      likelihood: MEDIUM
      impact: MEDIUM
      confidence: MEDIUM
      license: Semgrep Rules License v1.0. For more details, visit
        semgrep.dev/legal/rules-license
      vulnerability_class:
        - Improper Authorization
    languages:
      - javascript
      - typescript
    severity: ERROR
    mode: taint
    pattern-sources:
      - patterns:
          - pattern-either:
              - pattern-inside: function ... ($REQ, $RES) {...}
              - pattern-inside: function ... ($REQ, $RES, $NEXT) {...}
              - patterns:
                  - pattern-either:
                      - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES) {...})
                      - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES, $NEXT) {...})
                  - metavariable-regex:
                      metavariable: $METHOD
                      regex: ^(get|post|put|head|delete|options)$
          - pattern-either:
              - pattern: $REQ.query
              - pattern: $REQ.body
              - pattern: $REQ.params
              - pattern: $REQ.cookies
              - pattern: $REQ.headers
      - patterns:
          - pattern-either:
              - pattern-inside: |
                  ({ $REQ }: Request,$RES: Response, $NEXT: NextFunction) =>
                  {...}
              - pattern-inside: |
                  ({ $REQ }: Request,$RES: Response) => {...}
          - focus-metavariable: $REQ
          - pattern-either:
              - pattern: params
              - pattern: query
              - pattern: cookies
              - pattern: headers
              - pattern: body
    pattern-sinks:
      - patterns:
          - pattern: require($SINK)
          - focus-metavariable: $SINK

  - id: x-frame-options-misconfiguration
    message: By letting user input control `X-Frame-Options` header, there is a risk
      that software does not properly verify whether or not a browser should be
      allowed to render a page in an `iframe`.
    metadata:
      references:
        - https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options
      owasp:
        - A04:2021 - Insecure Design
      cwe:
        - "CWE-451: User Interface (UI) Misrepresentation of Critical
          Information"
      category: security
      technology:
        - express
      subcategory:
        - vuln
      likelihood: MEDIUM
      impact: MEDIUM
      confidence: MEDIUM
      license: Semgrep Rules License v1.0. For more details, visit
        semgrep.dev/legal/rules-license
      vulnerability_class:
        - Other
    languages:
      - javascript
      - typescript
    severity: WARNING
    mode: taint
    pattern-sources:
      - patterns:
          - pattern-either:
              - pattern-inside: function ... ($REQ, $RES) {...}
              - pattern-inside: function ... ($REQ, $RES, $NEXT) {...}
              - patterns:
                  - pattern-either:
                      - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES) {...})
                      - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES, $NEXT) {...})
                  - metavariable-regex:
                      metavariable: $METHOD
                      regex: ^(get|post|put|head|delete|options)$
          - pattern-either:
              - pattern: $REQ.query
              - pattern: $REQ.body
              - pattern: $REQ.params
              - pattern: $REQ.cookies
              - pattern: $REQ.headers
      - patterns:
          - pattern-either:
              - pattern-inside: |
                  ({ $REQ }: Request,$RES: Response, $NEXT: NextFunction) =>
                  {...}
              - pattern-inside: |
                  ({ $REQ }: Request,$RES: Response) => {...}
          - focus-metavariable: $REQ
          - pattern-either:
              - pattern: params
              - pattern: query
              - pattern: cookies
              - pattern: headers
              - pattern: body
    pattern-sinks:
      - patterns:
          - pattern-either:
              - pattern: $RES.set($HEADER, ...)
              - pattern: $RES.header($HEADER, ...)
              - pattern: $RES.setHeader($HEADER, ...)
              - pattern: |
                  $RES.set({$HEADER: ...}, ...)
              - pattern: |
                  $RES.writeHead($STATUS, {$HEADER: ...}, ...)
          - metavariable-regex:
              metavariable: $HEADER
              regex: .*(X-Frame-Options|x-frame-options).*

  - id: jwt-simple-noverify
    message: Detected the decoding of a JWT token without a verify step. JWT tokens
      must be verified before use, otherwise the token's integrity is unknown.
      This means a malicious actor could forge a JWT token with any claims. Set
      'verify' to `true` before using the token.
    severity: ERROR
    metadata:
      owasp:
        - A05:2021 - Security Misconfiguration
        - A07:2021 - Identification and Authentication Failures
      cwe:
        - "CWE-287: Improper Authentication"
        - "CWE-345: Insufficient Verification of Data Authenticity"
        - "CWE-347: Improper Verification of Cryptographic Signature"
      category: security
      subcategory:
        - vuln
      technology:
        - jwt-simple
        - jwt
      confidence: HIGH
      likelihood: MEDIUM
      impact: HIGH
      references:
        - https://www.npmjs.com/package/jwt-simple
        - https://cwe.mitre.org/data/definitions/287
        - https://cwe.mitre.org/data/definitions/345
        - https://cwe.mitre.org/data/definitions/347
      license: Semgrep Rules License v1.0. For more details, visit
        semgrep.dev/legal/rules-license
      vulnerability_class:
        - Cryptographic Issues
        - Improper Authentication
    languages:
      - javascript
      - typescript
    patterns:
      - pattern-inside: |
          $JWT = require('jwt-simple');
          ...
      - pattern: $JWT.decode($TOKEN, $SECRET, $NOVERIFY, ...)
      - metavariable-pattern:
          metavariable: $NOVERIFY
          patterns:
            - pattern-either:
                - pattern: |
                    true
                - pattern: |
                    "..."

  - id: code-string-concat
    message: Found data from an Express or Next web request flowing to `eval`. If
      this data is user-controllable this can lead to execution of arbitrary
      system commands in the context of your application process. Avoid `eval`
      whenever possible.
    options:
      interfile: true
    metadata:
      interfile: true
      confidence: HIGH
      owasp:
        - A03:2021 - Injection
      cwe:
        - "CWE-95: Improper Neutralization of Directives in Dynamically
          Evaluated Code ('Eval Injection')"
      references:
        - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval
        - https://nodejs.org/api/child_process.html#child_processexeccommand-options-callback
        - https://www.stackhawk.com/blog/nodejs-command-injection-examples-and-prevention/
        - https://ckarande.gitbooks.io/owasp-nodegoat-tutorial/content/tutorial/a1_-_server_side_js_injection.html
      category: security
      technology:
        - node.js
        - Express
        - Next.js
      subcategory:
        - vuln
      likelihood: MEDIUM
      impact: MEDIUM
      license: Semgrep Rules License v1.0. For more details, visit
        semgrep.dev/legal/rules-license
      vulnerability_class:
        - Code Injection
    languages:
      - javascript
      - typescript
    severity: ERROR
    mode: taint
    pattern-sources:
      - pattern-either:
          - patterns:
              - pattern-either:
                  - pattern-inside: function ... ($REQ, $RES) {...}
                  - pattern-inside: function ... ($REQ, $RES, $NEXT) {...}
                  - patterns:
                      - pattern-either:
                          - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES) {...})
                          - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES, $NEXT) {...})
                      - metavariable-regex:
                          metavariable: $METHOD
                          regex: ^(get|post|put|head|delete|options)$
              - pattern-either:
                  - pattern: $REQ.query
                  - pattern: $REQ.body
                  - pattern: $REQ.params
                  - pattern: $REQ.cookies
                  - pattern: $REQ.headers
          - patterns:
              - pattern-either:
                  - pattern-inside: |
                      import { ...,$IMPORT,... } from 'next/router'
                      ...
                  - pattern-inside: |
                      import $IMPORT from 'next/router';
                      ...
              - pattern-either:
                  - patterns:
                      - pattern-inside: |
                          $ROUTER = $IMPORT()
                          ...
                      - pattern-either:
                          - pattern-inside: |
                              const { ...,$PROPS,... } = $ROUTER.query
                              ...
                          - pattern-inside: |
                              var { ...,$PROPS,... } = $ROUTER.query
                              ...
                          - pattern-inside: |
                              let { ...,$PROPS,... } = $ROUTER.query
                              ...
                      - focus-metavariable: $PROPS
                  - patterns:
                      - pattern-inside: |
                          $ROUTER = $IMPORT()
                          ...
                      - pattern: |
                          $ROUTER.query.$VALUE 
                  - patterns:
                      - pattern: $IMPORT().query.$VALUE
    pattern-sinks:
      - patterns:
          - pattern: |
              eval(...)

  - id: node-knex-sqli
    message: "Detected SQL statement that is tainted by `$REQ` object. This could
      lead to SQL injection if the variable is user-controlled and not properly
      sanitized. In order to prevent SQL injection, it is recommended to use
      parameterized queries or prepared statements. An example of parameterized
      queries like so: `knex.raw('SELECT $1 from table', [userinput])` can help
      prevent SQLi."
    metadata:
      confidence: MEDIUM
      references:
        - https://knexjs.org/#Builder-fromRaw
        - https://knexjs.org/#Builder-whereRaw
        - https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html
      category: security
      owasp:
        - A01:2017 - Injection
        - A03:2021 - Injection
      cwe:
        - "CWE-89: Improper Neutralization of Special Elements used in an SQL
          Command ('SQL Injection')"
      technology:
        - express
        - nodejs
        - knex
      cwe2022-top25: true
      cwe2021-top25: true
      subcategory:
        - vuln
      likelihood: HIGH
      impact: MEDIUM
      license: Semgrep Rules License v1.0. For more details, visit
        semgrep.dev/legal/rules-license
      vulnerability_class:
        - SQL Injection
    languages:
      - javascript
      - typescript
    severity: WARNING
    mode: taint
    pattern-sources:
      - patterns:
          - pattern-either:
              - pattern-inside: function ... ($REQ, $RES) {...}
              - pattern-inside: function ... ($REQ, $RES, $NEXT) {...}
              - patterns:
                  - pattern-either:
                      - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES) {...})
                      - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES, $NEXT) {...})
                  - metavariable-regex:
                      metavariable: $METHOD
                      regex: ^(get|post|put|head|delete|options)
          - pattern-either:
              - pattern: $REQ.query
              - pattern: $REQ.body
              - pattern: $REQ.params
              - pattern: $REQ.cookies
              - pattern: $REQ.headers
              - pattern: $REQ.files.$ANYTHING.data.toString('utf8')
              - pattern: $REQ.files.$ANYTHING['data'].toString('utf8')
      - patterns:
          - pattern-either:
              - pattern-inside: |
                  ({ $REQ }: Request,$RES: Response, $NEXT: NextFunction) =>
                  {...}
              - pattern-inside: |
                  ({ $REQ }: Request,$RES: Response) => {...}
          - focus-metavariable: $REQ
          - pattern-either:
              - pattern: params
              - pattern: query
              - pattern: cookies
              - pattern: headers
              - pattern: body
              - pattern: files.$ANYTHING.data.toString('utf8')
              - pattern: files.$ANYTHING['data'].toString('utf8')
    pattern-sinks:
      - patterns:
          - focus-metavariable: $QUERY
          - pattern-either:
              - pattern-inside: $KNEX.fromRaw($QUERY, ...)
              - pattern-inside: $KNEX.whereRaw($QUERY, ...)
              - pattern-inside: $KNEX.raw($QUERY, ...)
          - pattern-either:
              - pattern-inside: |
                  require('knex')
                  ...
              - pattern-inside: |
                  import 'knex'
                  ...
    pattern-sanitizers:
      - patterns:
          - pattern: parseInt(...)

  - id: detect-eval-with-expression
    message: Detected use of dynamic execution of JavaScript which may come from
      user-input, which can lead to Cross-Site-Scripting (XSS). Where possible
      avoid including user-input in functions which dynamically execute
      user-input.
    metadata:
      cwe:
        - "CWE-95: Improper Neutralization of Directives in Dynamically
          Evaluated Code ('Eval Injection')"
      owasp:
        - A03:2021 - Injection
      source-rule-url: https://github.com/nodesecurity/eslint-plugin-security/blob/master/rules/detect-eval-with-expression.js
      references:
        - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval#never_use_eval!
      category: security
      technology:
        - javascript
      subcategory:
        - vuln
      likelihood: MEDIUM
      impact: MEDIUM
      confidence: MEDIUM
      license: Semgrep Rules License v1.0. For more details, visit
        semgrep.dev/legal/rules-license
      vulnerability_class:
        - Code Injection
    languages:
      - javascript
      - typescript
    severity: WARNING
    mode: taint
    pattern-sources:
      - patterns:
          - pattern-either:
              - pattern-inside: >
                  $PROP = new URLSearchParams($WINDOW. ...
                  .location.search).get('...')
                    ...
              - pattern-inside: |
                  $PROP = new URLSearchParams(location.search).get('...')
                    ...
              - pattern-inside: >
                  $PROP = new URLSearchParams($WINDOW. ...
                  .location.hash.substring(1)).get('...')
                    ...
              - pattern-inside: >
                  $PROP = new
                  URLSearchParams(location.hash.substring(1)).get('...')
                    ...
          - focus-metavariable: $PROP
      - patterns:
          - pattern-either:
              - pattern-inside: |
                  $PROPS = new URLSearchParams($WINDOW. ... .location.search)
                    ...
              - pattern-inside: |
                  $PROPS = new URLSearchParams(location.search)
                    ...
              - pattern-inside: |
                  $PROPS = new
                  URLSearchParams($WINDOW. ... .location.hash.substring(1))
                    ...
              - pattern-inside: |
                  $PROPS = new URLSearchParams(location.hash.substring(1))
                  ...
          - pattern: $PROPS.get('...')
          - focus-metavariable: $PROPS
      - patterns:
          - pattern-either:
              - pattern: location.href
              - pattern: location.hash
              - pattern: location.search
              - pattern: $WINDOW. ... .location.href
              - pattern: $WINDOW. ... .location.hash
              - pattern: $WINDOW. ... .location.search
    pattern-sinks:
      - patterns:
          - pattern-either:
              - pattern: eval(<... $SINK ...>)
              - pattern: window.eval(<... $SINK ...>)
              - pattern: new Function(<... $SINK ...>)
              - pattern: new Function(<... $SINK ...>)(...)
              - pattern: setTimeout(<... $SINK ...>,...)
              - pattern: setInterval(<... $SINK ...>,...)
          - focus-metavariable: $SINK
    pattern-sanitizers:
      - patterns:
          - pattern-either:
              - pattern: location.href = $FUNC(...)
              - pattern: location.hash = $FUNC(...)
              - pattern: location.search = $FUNC(...)
              - pattern: $WINDOW. ... .location.href = $FUNC(...)
              - pattern: $WINDOW. ... .location.hash = $FUNC(...)
              - pattern: $WINDOW. ... .location.search = $FUNC(...)

  - id: hardcoded-passport-secret
    message: A hard-coded credential was detected. It is not recommended to store
      credentials in source-code, as this risks secrets being leaked and used by
      either an internal or external malicious adversary. It is recommended to
      use environment variables to securely provide credentials or retrieve
      credentials from a secure vault or HSM (Hardware Security Module).
    metadata:
      cwe:
        - "CWE-798: Use of Hard-coded Credentials"
      references:
        - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html
      owasp:
        - A07:2021 - Identification and Authentication Failures
      asvs:
        section: "V3: Session Management Verification Requirements"
        control_id: 3.5.2 Static API keys or secret
        control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x12-V3-Session-management.md#v35-token-based-session-management
        version: "4"
      category: security
      technology:
        - jwt
        - nodejs
        - secrets
      cwe2022-top25: true
      cwe2021-top25: true
      subcategory:
        - vuln
      likelihood: HIGH
      impact: MEDIUM
      confidence: HIGH
      license: Semgrep Rules License v1.0. For more details, visit
        semgrep.dev/legal/rules-license
      vulnerability_class:
        - Hard-coded Secrets
    languages:
      - javascript
      - typescript
    severity: WARNING
    mode: taint
    pattern-sources:
      - by-side-effect: true
        patterns:
          - pattern-either:
              - pattern: |
                  {..., clientSecret: "...", ...}
              - pattern: |
                  {..., secretOrKey: "...", ...}
              - pattern: |
                  {..., consumerSecret: "...", ...}
              - patterns:
                  - pattern-inside: |
                      $OBJ = {}
                      ...
                  - pattern-either:
                      - pattern: |
                          $OBJ.clientSecret = "..."
                      - pattern: |
                          $OBJ.secretOrKey = "..."
                      - pattern: |
                          $OBJ.consumerSecret = "..."
                  - pattern: $OBJ
              - patterns:
                  - pattern-inside: |
                      $SECRET = '...'
                      ...
                  - pattern-either:
                      - pattern: |
                          {..., clientSecret: $SECRET, ...}
                      - pattern: |
                          {..., secretOrKey: $SECRET, ...}
                      - pattern: |
                          {..., consumerSecret: $SECRET, ...}
              - patterns:
                  - pattern-inside: |
                      $SECRET = '...'
                      ...
                  - pattern-either:
                      - pattern-inside: |
                          $VALUE = {..., clientSecret: $SECRET, ...}
                          ...
                      - pattern-inside: |
                          $VALUE = {..., secretOrKey: $SECRET, ...}
                          ...
                      - pattern-inside: |
                          $VALUE = {..., consumerSecret: $SECRET, ...}
                          ...
                  - pattern: $VALUE
    pattern-sinks:
      - patterns:
          - pattern-either:
              - pattern-inside: |
                  $F = require("$I").Strategy
                  ...
              - pattern-inside: |
                  $F = require("$I")
                  ...
              - pattern-inside: |
                  import { $STRAT as $F } from '$I'
                  ...
              - pattern-inside: |
                  import $F from '$I'
                  ...
          - metavariable-regex:
              metavariable: $I
              regex: (passport-.*)
          - pattern-inside: |
              new $F($VALUE,...)
          - focus-metavariable: $VALUE

  - id: express-sequelize-injection
    message: Detected a sequelize statement that is tainted by user-input. This
      could lead to SQL injection if the variable is user-controlled and is not
      properly sanitized. In order to prevent SQL injection, it is recommended
      to use parameterized queries or prepared statements.
    options:
      interfile: true
    metadata:
      interfile: true
      references:
        - https://sequelize.org/docs/v6/core-concepts/raw-queries/#replacements
      category: security
      technology:
        - express
      cwe:
        - "CWE-89: Improper Neutralization of Special Elements used in an SQL
          Command ('SQL Injection')"
      owasp:
        - A01:2017 - Injection
        - A03:2021 - Injection
      cwe2022-top25: true
      cwe2021-top25: true
      subcategory:
        - vuln
      likelihood: HIGH
      impact: HIGH
      confidence: HIGH
      license: Semgrep Rules License v1.0. For more details, visit
        semgrep.dev/legal/rules-license
      vulnerability_class:
        - SQL Injection
    languages:
      - javascript
      - typescript
    severity: ERROR
    mode: taint
    pattern-sources:
      - patterns:
          - pattern-either:
              - pattern-inside: function ... ($REQ, $RES) {...}
              - pattern-inside: function ... ($REQ, $RES, $NEXT) {...}
              - patterns:
                  - pattern-either:
                      - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES) {...})
                      - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES, $NEXT) {...})
                  - metavariable-regex:
                      metavariable: $METHOD
                      regex: ^(get|post|put|head|delete|options)$
          - pattern-either:
              - pattern: $REQ.query
              - pattern: $REQ.body
              - pattern: $REQ.params
              - pattern: $REQ.cookies
              - pattern: $REQ.headers
              - pattern: $REQ.files.$ANYTHING.data.toString('utf8')
              - pattern: $REQ.files.$ANYTHING['data'].toString('utf8')
      - patterns:
          - pattern-either:
              - pattern-inside: |
                  ({ $REQ }: Request,$RES: Response, $NEXT: NextFunction) =>
                  {...}
              - pattern-inside: |
                  ({ $REQ }: Request,$RES: Response) => {...}
          - focus-metavariable: $REQ
          - pattern-either:
              - pattern: params
              - pattern: query
              - pattern: cookies
              - pattern: headers
              - pattern: body
              - pattern: files.$ANYTHING.data.toString('utf8')
              - pattern: files.$ANYTHING['data'].toString('utf8')
    pattern-sinks:
      - pattern-either:
          - patterns:
              - pattern-either:
                  - pattern: sequelize.query($QUERY,...)
                  - pattern: $DB.sequelize.query($QUERY,...)
              - focus-metavariable: $QUERY
    pattern-sanitizers:
      - pattern-either:
          - pattern: parseInt(...)
          - pattern: $FUNC. ... .hash(...)

  - id: no-null-cipher
    pattern: NullCipher(...)
    metadata:
      cwe:
        - "CWE-327: Use of a Broken or Risky Cryptographic Algorithm"
      owasp:
        - A03:2017 - Sensitive Data Exposure
        - A02:2021 - Cryptographic Failures
      source-rule-url: https://find-sec-bugs.github.io/bugs.htm#NULL_CIPHER
      asvs:
        section: V6 Stored Cryptography Verification Requirements
        control_id: 6.2.5 Insecure Algorithm
        control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x14-V6-Cryptography.md#v62-algorithms
        version: "4"
      category: security
      technology:
        - kotlin
      references:
        - https://owasp.org/Top10/A02_2021-Cryptographic_Failures
      subcategory:
        - vuln
      likelihood: LOW
      impact: MEDIUM
      confidence: MEDIUM
      license: Semgrep Rules License v1.0. For more details, visit
        semgrep.dev/legal/rules-license
      vulnerability_class:
        - Cryptographic Issues
    message: 'NullCipher was detected. This will not encrypt anything; the cipher
      text will be the same as the plain text. Use a valid, secure cipher:
      Cipher.getInstance("AES/CBC/PKCS7PADDING"). See
      https://owasp.org/www-community/Using_the_Java_Cryptographic_Extensions
      for more information.'
    severity: WARNING
    languages:
      - kt
      - scala

  - id: disallow-old-tls-versions2
    message: Detects creations of $HTTPS servers from option objects that don't
      disallow SSL v2, SSL v3, and TLS v1. These protocols are deprecated due to
      POODLE, man in the middle attacks, and other vulnerabilities.
    severity: WARNING
    metadata:
      likelihood: MEDIUM
      impact: MEDIUM
      confidence: MEDIUM
      category: security
      cwe: "CWE-319: Cleartext Transmission of Sensitive Information"
      owasp: A03:2017 - Sensitive Data Exposure
      references:
        - https://us-cert.cisa.gov/ncas/alerts/TA14-290A
        - https://stackoverflow.com/questions/40434934/how-to-disable-the-ssl-3-0-and-tls-1-0-in-nodejs
        - https://nodejs.org/api/https.html#https_https_createserver_options_requestlistener
      subcategory:
        - vuln
      technology:
        - node.js
      vulnerability: Insecure Transport
      license: Semgrep Rules License v1.0. For more details, visit
        semgrep.dev/legal/rules-license
      vulnerability_class:
        - Mishandled Sensitive Information
    languages:
      - javascript
      - typescript
    patterns:
      - pattern-either:
          - pattern-inside: |
              $CONST = require('crypto');
              ...
          - pattern-inside: |
              $CONST = require('constants');
              ...
      - pattern-inside: |
          $HTTPS = require('https');
          ...
      - pattern: |
          $OPTIONS = {};
          ...
          $HTTPS.createServer($OPTIONS, ...);
      - pattern-not: >
          $OPTIONS = {secureOptions: $CONST.SSL_OP_NO_TLSv1 |
          $CONST.SSL_OP_NO_SSLv3 | $CONST.SSL_OP_NO_SSLv2};

          ...

          $HTTPS.createServer($OPTIONS, ...);
      - pattern-not: >
          $OPTIONS = {secureOptions: $CONST.SSL_OP_NO_TLSv1 |
          $CONST.SSL_OP_NO_SSLv2 | $CONST.SSL_OP_NO_SSLv3};

          ...

          $HTTPS.createServer($OPTIONS, ...);
      - pattern-not: >
          $OPTIONS = {secureOptions: $CONST.SSL_OP_NO_SSLv2  |
          $CONST.SSL_OP_NO_TLSv1 | $CONST.SSL_OP_NO_SSLv3};

          ...

          $HTTPS.createServer($OPTIONS, ...);
      - pattern-not: >
          $OPTIONS = {secureOptions: $CONST.SSL_OP_NO_SSLv2 |
          $CONST.SSL_OP_NO_SSLv3 | $CONST.SSL_OP_NO_TLSv1};

          ...

          $HTTPS.createServer($OPTIONS, ...);
      - pattern-not: >
          $OPTIONS = {secureOptions: $CONST.SSL_OP_NO_SSLv3 |
          $CONST.SSL_OP_NO_SSLv2 | $CONST.SSL_OP_NO_TLSv1};

          ...

          $HTTPS.createServer($OPTIONS, ...);
      - pattern-not: >
          $OPTIONS = {secureOptions: $CONST.SSL_OP_NO_SSLv3 |
          $CONST.SSL_OP_NO_TLSv1 | $CONST.SSL_OP_NO_SSLv2};

          ...

          $HTTPS.createServer($OPTIONS, ...);

  - id: angular-bypasssecuritytrust
    message: Detected the use of `$TRUST`. This can introduce a Cross-Site-Scripting
      (XSS) vulnerability if this comes from user-provided input. If you have to
      use `$TRUST`, ensure it does not come from user-input or use the
      appropriate prevention mechanism e.g. input validation or sanitization
      depending on the context.
    metadata:
      cwe:
        - "CWE-79: Improper Neutralization of Input During Web Page Generation
          ('Cross-site Scripting')"
      references:
        - https://angular.io/api/platform-browser/DomSanitizer
        - https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html
      owasp:
        - A07:2017 - Cross-Site Scripting (XSS)
        - A03:2021 - Injection
      confidence: MEDIUM
      category: security
      technology:
        - angular
        - browser
      cwe2022-top25: true
      cwe2021-top25: true
      subcategory:
        - vuln
      likelihood: LOW
      impact: MEDIUM
      license: Semgrep Rules License v1.0. For more details, visit
        semgrep.dev/legal/rules-license
      vulnerability_class:
        - Cross-Site-Scripting (XSS)
    languages:
      - typescript
    severity: WARNING
    mode: taint
    pattern-sources:
      - patterns:
          - pattern-either:
              - pattern-inside: |
                  function ...({..., $X: string, ...}) { ... }
              - pattern-inside: |
                  function ...(..., $X: string, ...) { ... }
          - focus-metavariable: $X
    pattern-sinks:
      - patterns:
          - pattern-either:
              - pattern: $X.$TRUST($Y)
          - focus-metavariable: $Y
          - pattern-not: |
              $X.$TRUST(`...`)
          - pattern-not: |
              $X.$TRUST("...")
          - metavariable-regex:
              metavariable: $TRUST
              regex: (bypassSecurityTrustHtml|bypassSecurityTrustStyle|bypassSecurityTrustScript|bypassSecurityTrustUrl|bypassSecurityTrustResourceUrl)
    pattern-sanitizers:
      - patterns:
          - pattern-either:
              - pattern-inside: |
                  import $S from "underscore.string"
                  ...
              - pattern-inside: |
                  import * as $S from "underscore.string"
                  ...
              - pattern-inside: |
                  import $S from "underscore.string"
                  ...
              - pattern-inside: |
                  $S = require("underscore.string")
                  ...
          - pattern-either:
              - pattern: $S.escapeHTML(...)
      - patterns:
          - pattern-either:
              - pattern-inside: |
                  import $S from "dompurify"
                  ...
              - pattern-inside: |
                  import { ..., $S,... } from "dompurify"
                  ...
              - pattern-inside: |
                  import * as $S from "dompurify"
                  ...
              - pattern-inside: |
                  $S = require("dompurify")
                  ...
              - pattern-inside: |
                  import $S from "isomorphic-dompurify"
                  ...
              - pattern-inside: |
                  import * as $S from "isomorphic-dompurify"
                  ...
              - pattern-inside: |
                  $S = require("isomorphic-dompurify")
                  ...
          - pattern-either:
              - patterns:
                  - pattern-inside: |
                      $VALUE = $S(...)
                      ...
                  - pattern: $VALUE.sanitize(...)
              - patterns:
                  - pattern-inside: |
                      $VALUE = $S.sanitize
                      ...
                  - pattern: $S(...)
              - pattern: $S.sanitize(...)
              - pattern: $S(...)
      - patterns:
          - pattern-either:
              - pattern-inside: |
                  import $S from 'xss';
                  ...
              - pattern-inside: |
                  import * as $S from 'xss';
                  ...
              - pattern-inside: |
                  $S = require("xss")
                  ...
          - pattern: $S(...)
      - patterns:
          - pattern-either:
              - pattern-inside: |
                  import $S from 'sanitize-html';
                  ...
              - pattern-inside: |
                  import * as $S from "sanitize-html";
                  ...
              - pattern-inside: |
                  $S = require("sanitize-html")
                  ...
          - pattern: $S(...)
      - patterns:
          - pattern: sanitizer.sanitize(...)
          - pattern-not: sanitizer.sanitize(SecurityContext.NONE, ...);

  - id: awscdk-bucket-encryption
    message: 'Add "encryption: $Y.BucketEncryption.KMS_MANAGED" or "encryption:
      $Y.BucketEncryption.S3_MANAGED" to the bucket props for Bucket construct
      $X'
    metadata:
      cwe:
        - "CWE-311: Missing Encryption of Sensitive Data"
      category: security
      technology:
        - AWS-CDK
      references:
        - https://docs.aws.amazon.com/AmazonS3/latest/userguide/security-best-practices.html
      owasp:
        - A03:2017 - Sensitive Data Exposure
        - A04:2021 - Insecure Design
      subcategory:
        - vuln
      likelihood: LOW
      impact: HIGH
      confidence: MEDIUM
      license: Semgrep Rules License v1.0. For more details, visit
        semgrep.dev/legal/rules-license
      vulnerability_class:
        - Cryptographic Issues
    languages:
      - typescript
    severity: ERROR
    pattern-either:
      - patterns:
          - pattern-inside: |
              import {Bucket} from '@aws-cdk/aws-s3'
              ...
          - pattern: const $X = new Bucket(...)
          - pattern-not: >
              const $X = new Bucket(..., {..., encryption:
              BucketEncryption.KMS_MANAGED, ...})
          - pattern-not: >
              const $X = new Bucket(..., {..., encryption: BucketEncryption.KMS,
              ...})
          - pattern-not: >
              const $X = new Bucket(..., {..., encryption:
              BucketEncryption.S3_MANAGED, ...})
      - patterns:
          - pattern-inside: |
              import * as $Y from '@aws-cdk/aws-s3'
              ...
          - pattern: const $X = new $Y.Bucket(...)
          - pattern-not: >
              const $X = new $Y.Bucket(..., {..., encryption:
              $Y.BucketEncryption.KMS_MANAGED, ...})
          - pattern-not: >
              const $X = new $Y.Bucket(..., {..., encryption:
              $Y.BucketEncryption.KMS, ...})
          - pattern-not: >
              const $X = new $Y.Bucket(..., {..., encryption:
              $Y.BucketEncryption.S3_MANAGED, ...})

  - id: awscdk-sqs-unencryptedqueue
    message: 'Queue $X is missing encryption at rest. Add "encryption:
      $Y.QueueEncryption.KMS" or "encryption: $Y.QueueEncryption.KMS_MANAGED" to
      the queue props to enable encryption at rest for the queue.'
    metadata:
      category: security
      cwe:
        - "CWE-311: Missing Encryption of Sensitive Data"
      technology:
        - AWS-CDK
      references:
        - https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-data-protection.html
      owasp:
        - A03:2017 - Sensitive Data Exposure
        - A04:2021 - Insecure Design
      subcategory:
        - vuln
      likelihood: LOW
      impact: HIGH
      confidence: MEDIUM
      license: Semgrep Rules License v1.0. For more details, visit
        semgrep.dev/legal/rules-license
      vulnerability_class:
        - Cryptographic Issues
    languages:
      - ts
    severity: WARNING
    pattern-either:
      - patterns:
          - pattern-inside: |
              import {Queue} from '@aws-cdk/aws-sqs'
              ...
          - pattern: const $X = new Queue(...)
          - pattern-not: >
              const $X = new Queue(..., {..., encryption:
              QueueEncryption.KMS_MANAGED, ...})
          - pattern-not: >
              const $X = new Queue(..., {..., encryption: QueueEncryption.KMS,
              ...})
      - patterns:
          - pattern-inside: |
              import * as $Y from '@aws-cdk/aws-sqs'
              ...
          - pattern: const $X = new $Y.Queue(...)
          - pattern-not: >
              const $X = new $Y.Queue(..., {..., encryption:
              $Y.QueueEncryption.KMS_MANAGED, ...})
          - pattern-not: >
              const $X = new $Y.Queue(..., {..., encryption:
              $Y.QueueEncryption.KMS, ...})

  - id: awscdk-codebuild-project-public
    message: CodeBuild Project $X is set to have a public URL. This will make the
      build results, logs, artifacts publically accessible, including builds
      prior to the project being public. Ensure this is acceptable for the
      project.
    metadata:
      category: security
      cwe:
        - "CWE-306: Missing Authentication for Critical Function"
      technology:
        - AWS-CDK
      references:
        - https://docs.aws.amazon.com/codebuild/latest/userguide/public-builds.html
      owasp:
        - A07:2021 - Identification and Authentication Failures
      cwe2022-top25: true
      cwe2021-top25: true
      subcategory:
        - vuln
      likelihood: MEDIUM
      impact: MEDIUM
      confidence: MEDIUM
      license: Semgrep Rules License v1.0. For more details, visit
        semgrep.dev/legal/rules-license
      vulnerability_class:
        - Improper Authentication
    languages:
      - ts
    severity: WARNING
    pattern-either:
      - patterns:
          - pattern-inside: |
              import {Project} from '@aws-cdk/aws-codebuild'
              ...
          - pattern: |
              const $X = new Project(..., {..., badge: true, ...})
      - patterns:
          - pattern-inside: |
              import * as $Y from '@aws-cdk/aws-codebuild'
              ...
          - pattern: |
              const $X = new $Y.Project(..., {..., badge: true, ...})

  - id: react-dangerouslysetinnerhtml
    message: Detection of dangerouslySetInnerHTML from non-constant definition. This
      can inadvertently expose users to cross-site scripting (XSS) attacks if
      this comes from user-provided input. If you have to use
      dangerouslySetInnerHTML, consider using a sanitization library such as
      DOMPurify to sanitize your HTML.
    metadata:
      cwe:
        - "CWE-79: Improper Neutralization of Input During Web Page Generation
          ('Cross-site Scripting')"
      owasp:
        - A07:2017 - Cross-Site Scripting (XSS)
        - A03:2021 - Injection
      references:
        - https://react.dev/reference/react-dom/components/common#dangerously-setting-the-inner-html
      category: security
      confidence: MEDIUM
      technology:
        - react
      cwe2022-top25: true
      cwe2021-top25: true
      subcategory:
        - vuln
      likelihood: MEDIUM
      impact: MEDIUM
      license: Semgrep Rules License v1.0. For more details, visit
        semgrep.dev/legal/rules-license
      vulnerability_class:
        - Cross-Site-Scripting (XSS)
    languages:
      - typescript
      - javascript
    severity: WARNING
    mode: taint
    pattern-sources:
      - patterns:
          - pattern-either:
              - pattern-inside: |
                  function ...({..., $X, ...}) { ... }
              - pattern-inside: |
                  function ...(..., $X, ...) { ... }
          - focus-metavariable: $X
          - pattern-not-inside: |
              $F. ... .$SANITIZEUNC(...)
    pattern-sinks:
      - patterns:
          - focus-metavariable: $X
          - pattern-either:
              - pattern: |
                  {...,dangerouslySetInnerHTML: {__html: $X},...}
              - pattern: |
                  <$Y ... dangerouslySetInnerHTML={{__html: $X}} />
          - pattern-not: |
              <$Y ... dangerouslySetInnerHTML={{__html: "..."}} />
          - pattern-not: |
              {...,dangerouslySetInnerHTML:{__html: "..."},...}
          - metavariable-pattern:
              patterns:
                - pattern-not: |
                    {...}
              metavariable: $X
          - pattern-not: |
              <... {__html: "..."} ...>
          - pattern-not: |
              <... {__html: `...`} ...>
    pattern-sanitizers:
      - patterns:
          - pattern-either:
              - pattern-inside: |
                  import $S from "underscore.string"
                  ...
              - pattern-inside: |
                  import * as $S from "underscore.string"
                  ...
              - pattern-inside: |
                  import $S from "underscore.string"
                  ...
              - pattern-inside: |
                  $S = require("underscore.string")
                  ...
          - pattern-either:
              - pattern: $S.escapeHTML(...)
      - patterns:
          - pattern-either:
              - pattern-inside: |
                  import $S from "dompurify"
                  ...
              - pattern-inside: |
                  import { ..., $S,... } from "dompurify"
                  ...
              - pattern-inside: |
                  import * as $S from "dompurify"
                  ...
              - pattern-inside: |
                  $S = require("dompurify")
                  ...
              - pattern-inside: |
                  import $S from "isomorphic-dompurify"
                  ...
              - pattern-inside: |
                  import * as $S from "isomorphic-dompurify"
                  ...
              - pattern-inside: |
                  $S = require("isomorphic-dompurify")
                  ...
          - pattern-either:
              - patterns:
                  - pattern-inside: |
                      $VALUE = $S(...)
                      ...
                  - pattern: $VALUE.sanitize(...)
              - patterns:
                  - pattern-inside: |
                      $VALUE = $S.sanitize
                      ...
                  - pattern: $S(...)
              - pattern: $S.sanitize(...)
              - pattern: $S(...)
      - patterns:
          - pattern-either:
              - pattern-inside: |
                  import $S from 'xss';
                  ...
              - pattern-inside: |
                  import * as $S from 'xss';
                  ...
              - pattern-inside: |
                  $S = require("xss")
                  ...
          - pattern: $S(...)
      - patterns:
          - pattern-either:
              - pattern-inside: |
                  import $S from 'sanitize-html';
                  ...
              - pattern-inside: |
                  import * as $S from "sanitize-html";
                  ...
              - pattern-inside: |
                  $S = require("sanitize-html")
                  ...
          - pattern: $S(...)
      - patterns:
          - pattern-either:
              - pattern-inside: |
                  $S = new Remarkable()
                  ...
          - pattern: $S.render(...)

  - id: react-unsanitized-method
    message: Detection of $HTML from non-constant definition. This can inadvertently
      expose users to cross-site scripting (XSS) attacks if this comes from
      user-provided input. If you have to use $HTML, consider using a
      sanitization library such as DOMPurify to sanitize your HTML.
    metadata:
      cwe:
        - "CWE-79: Improper Neutralization of Input During Web Page Generation
          ('Cross-site Scripting')"
      owasp:
        - A07:2017 - Cross-Site Scripting (XSS)
        - A03:2021 - Injection
      references:
        - https://developer.mozilla.org/en-US/docs/Web/API/Document/writeln
        - https://developer.mozilla.org/en-US/docs/Web/API/Document/write
        - https://developer.mozilla.org/en-US/docs/Web/API/Element/insertAdjacentHTML
      category: security
      confidence: MEDIUM
      technology:
        - react
      cwe2022-top25: true
      cwe2021-top25: true
      subcategory:
        - vuln
      likelihood: HIGH
      impact: MEDIUM
      license: Semgrep Rules License v1.0. For more details, visit
        semgrep.dev/legal/rules-license
      vulnerability_class:
        - Cross-Site-Scripting (XSS)
    languages:
      - typescript
      - javascript
    severity: WARNING
    mode: taint
    pattern-sources:
      - patterns:
          - pattern-either:
              - pattern-inside: |
                  function ...({..., $X, ...}) { ... }
              - pattern-inside: |
                  function ...(..., $X, ...) { ... }
          - focus-metavariable: $X
          - pattern-either:
              - pattern: $X.$Y
              - pattern: $X[...]
    pattern-sinks:
      - patterns:
          - pattern-either:
              - pattern: |
                  this.window.document. ... .$HTML('...',$SINK) 
              - pattern: |
                  window.document. ... .$HTML('...',$SINK) 
              - pattern: |
                  document.$HTML($SINK)  
          - metavariable-regex:
              metavariable: $HTML
              regex: (writeln|write)
          - focus-metavariable: $SINK
      - patterns:
          - pattern-either:
              - pattern: |
                  $PROP. ... .$HTML('...',$SINK) 
          - metavariable-regex:
              metavariable: $HTML
              regex: (insertAdjacentHTML)
          - focus-metavariable: $SINK
    pattern-sanitizers:
      - patterns:
          - pattern-either:
              - pattern-inside: |
                  import $S from "underscore.string"
                  ...
              - pattern-inside: |
                  import * as $S from "underscore.string"
                  ...
              - pattern-inside: |
                  import $S from "underscore.string"
                  ...
              - pattern-inside: |
                  $S = require("underscore.string")
                  ...
          - pattern-either:
              - pattern: $S.escapeHTML(...)
      - patterns:
          - pattern-either:
              - pattern-inside: |
                  import $S from "dompurify"
                  ...
              - pattern-inside: |
                  import { ..., $S,... } from "dompurify"
                  ...
              - pattern-inside: |
                  import * as $S from "dompurify"
                  ...
              - pattern-inside: |
                  $S = require("dompurify")
                  ...
              - pattern-inside: |
                  import $S from "isomorphic-dompurify"
                  ...
              - pattern-inside: |
                  import * as $S from "isomorphic-dompurify"
                  ...
              - pattern-inside: |
                  $S = require("isomorphic-dompurify")
                  ...
          - pattern-either:
              - patterns:
                  - pattern-inside: |
                      $VALUE = $S(...)
                      ...
                  - pattern: $VALUE.sanitize(...)
              - patterns:
                  - pattern-inside: |
                      $VALUE = $S.sanitize
                      ...
                  - pattern: $S(...)
              - pattern: $S.sanitize(...)
              - pattern: $S(...)
      - patterns:
          - pattern-either:
              - pattern-inside: |
                  import $S from 'xss';
                  ...
              - pattern-inside: |
                  import * as $S from 'xss';
                  ...
              - pattern-inside: |
                  $S = require("xss")
                  ...
          - pattern: $S(...)
      - patterns:
          - pattern-either:
              - pattern-inside: |
                  import $S from 'sanitize-html';
                  ...
              - pattern-inside: |
                  import * as $S from "sanitize-html";
                  ...
              - pattern-inside: |
                  $S = require("sanitize-html")
                  ...
          - pattern: $S(...)
      - patterns:
          - pattern-either:
              - pattern-inside: |
                  $S = new Remarkable()
                  ...
          - pattern: $S.render(...)

  - id: react-unsanitized-property
    message: Detection of $HTML from non-constant definition. This can inadvertently
      expose users to cross-site scripting (XSS) attacks if this comes from
      user-provided input. If you have to use $HTML, consider using a
      sanitization library such as DOMPurify to sanitize your HTML.
    metadata:
      cwe:
        - "CWE-79: Improper Neutralization of Input During Web Page Generation
          ('Cross-site Scripting')"
      owasp:
        - A07:2017 - Cross-Site Scripting (XSS)
        - A03:2021 - Injection
      references:
        - https://react.dev/reference/react-dom/components/common#dangerously-setting-the-inner-html
      category: security
      confidence: MEDIUM
      technology:
        - react
      cwe2022-top25: true
      cwe2021-top25: true
      subcategory:
        - vuln
      likelihood: MEDIUM
      impact: MEDIUM
      license: Semgrep Rules License v1.0. For more details, visit
        semgrep.dev/legal/rules-license
      vulnerability_class:
        - Cross-Site-Scripting (XSS)
    languages:
      - typescript
      - javascript
    severity: WARNING
    mode: taint
    pattern-sources:
      - patterns:
          - pattern-either:
              - pattern-inside: |
                  function ...({..., $X, ...}) { ... }
              - pattern-inside: |
                  function ...(..., $X, ...) { ... }
          - focus-metavariable: $X
          - pattern-either:
              - pattern: $X.$Y
              - pattern: $X[...]
    pattern-sinks:
      - patterns:
          - pattern-either:
              - pattern-inside: |
                  $BODY = $REACT.useRef(...)
                  ...
              - pattern-inside: |
                  $BODY = useRef(...)
                  ...
              - pattern-inside: |
                  $BODY = findDOMNode(...)
                  ...
              - pattern-inside: |
                  $BODY = createRef(...)
                  ...
              - pattern-inside: |
                  $BODY = $REACT.findDOMNode(...)
                  ...
              - pattern-inside: |
                  $BODY = $REACT.createRef(...)
                  ...
          - pattern-either:
              - pattern: |
                  $BODY. ... .$HTML = $SINK 
              - pattern: |
                  $BODY.$HTML = $SINK  
          - metavariable-regex:
              metavariable: $HTML
              regex: (innerHTML|outerHTML)
          - focus-metavariable: $SINK
      - patterns:
          - pattern-either:
              - pattern: ReactDOM.findDOMNode(...).$HTML = $SINK
          - metavariable-regex:
              metavariable: $HTML
              regex: (innerHTML|outerHTML)
          - focus-metavariable: $SINK
    pattern-sanitizers:
      - patterns:
          - pattern-either:
              - pattern-inside: |
                  import $S from "underscore.string"
                  ...
              - pattern-inside: |
                  import * as $S from "underscore.string"
                  ...
              - pattern-inside: |
                  import $S from "underscore.string"
                  ...
              - pattern-inside: |
                  $S = require("underscore.string")
                  ...
          - pattern-either:
              - pattern: $S.escapeHTML(...)
      - patterns:
          - pattern-either:
              - pattern-inside: |
                  import $S from "dompurify"
                  ...
              - pattern-inside: |
                  import { ..., $S,... } from "dompurify"
                  ...
              - pattern-inside: |
                  import * as $S from "dompurify"
                  ...
              - pattern-inside: |
                  $S = require("dompurify")
                  ...
              - pattern-inside: |
                  import $S from "isomorphic-dompurify"
                  ...
              - pattern-inside: |
                  import * as $S from "isomorphic-dompurify"
                  ...
              - pattern-inside: |
                  $S = require("isomorphic-dompurify")
                  ...
          - pattern-either:
              - patterns:
                  - pattern-inside: |
                      $VALUE = $S(...)
                      ...
                  - pattern: $VALUE.sanitize(...)
              - patterns:
                  - pattern-inside: |
                      $VALUE = $S.sanitize
                      ...
                  - pattern: $S(...)
              - pattern: $S.sanitize(...)
              - pattern: $S(...)
      - patterns:
          - pattern-either:
              - pattern-inside: |
                  import $S from 'xss';
                  ...
              - pattern-inside: |
                  import * as $S from 'xss';
                  ...
              - pattern-inside: |
                  $S = require("xss")
                  ...
          - pattern: $S(...)
      - patterns:
          - pattern-either:
              - pattern-inside: |
                  import $S from 'sanitize-html';
                  ...
              - pattern-inside: |
                  import * as $S from "sanitize-html";
                  ...
              - pattern-inside: |
                  $S = require("sanitize-html")
                  ...
          - pattern: $S(...)
      - patterns:
          - pattern-either:
              - pattern-inside: |
                  $S = new Remarkable()
                  ...
          - pattern: $S.render(...)

  - id: des-is-deprecated
    message: DES is considered deprecated. AES is the recommended cipher. Upgrade to
      use AES. See
      https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard
      for more information.
    metadata:
      functional-categories:
        - crypto::search::symmetric-algorithm::javax.crypto
      cwe:
        - "CWE-326: Inadequate Encryption Strength"
      owasp:
        - A03:2017 - Sensitive Data Exposure
        - A02:2021 - Cryptographic Failures
      source-rule-url: https://find-sec-bugs.github.io/bugs.htm#DES_USAGE
      asvs:
        section: V6 Stored Cryptography Verification Requirements
        control_id: 6.2.5 Insecure Algorithm
        control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x14-V6-Cryptography.md#v62-algorithms
        version: "4"
      references:
        - https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard
        - https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html#algorithms
      category: security
      technology:
        - java
      subcategory:
        - vuln
      likelihood: MEDIUM
      impact: MEDIUM
      confidence: HIGH
      license: Semgrep Rules License v1.0. For more details, visit
        semgrep.dev/legal/rules-license
      vulnerability_class:
        - Cryptographic Issues
    severity: WARNING
    patterns:
      - pattern-either:
          - pattern-inside: $CIPHER.getInstance("=~/DES/.*/")
          - pattern-inside: $CIPHER.getInstance("DES")
      - pattern-either:
          - pattern: |
              "=~/DES/.*/"
          - pattern: |
              "DES"
    fix: |
      "AES/GCM/NoPadding"
    languages:
      - java
      - kt

  - id: desede-is-deprecated
    message: Triple DES (3DES or DESede) is considered deprecated. AES is the
      recommended cipher. Upgrade to use AES.
    metadata:
      functional-categories:
        - crypto::search::symmetric-algorithm::javax.crypto
      cwe:
        - "CWE-326: Inadequate Encryption Strength"
      owasp:
        - A03:2017 - Sensitive Data Exposure
        - A02:2021 - Cryptographic Failures
      source-rule-url: https://find-sec-bugs.github.io/bugs.htm#TDES_USAGE
      references:
        - https://csrc.nist.gov/News/2017/Update-to-Current-Use-and-Deprecation-of-TDEA
      category: security
      technology:
        - java
      subcategory:
        - vuln
      likelihood: MEDIUM
      impact: MEDIUM
      confidence: HIGH
      license: Semgrep Rules License v1.0. For more details, visit
        semgrep.dev/legal/rules-license
      vulnerability_class:
        - Cryptographic Issues
    severity: WARNING
    patterns:
      - pattern-either:
          - pattern: |
              $CIPHER.getInstance("=~/DESede.*/")
          - pattern: |
              $CRYPTO.KeyGenerator.getInstance("DES")
    languages:
      - java
      - kt

  - id: detect-angular-element-taint
    message: Use of angular.element can lead to XSS if user-input is treated as part
      of the HTML element within `$SINK`. It is recommended to contextually
      output encode user-input, before inserting into `$SINK`. If the HTML needs
      to be preserved it is recommended to sanitize the input using
      $sce.getTrustedHTML or $sanitize.
    metadata:
      confidence: MEDIUM
      cwe:
        - "CWE-79: Improper Neutralization of Input During Web Page Generation
          ('Cross-site Scripting')"
      references:
        - https://docs.angularjs.org/api/ng/function/angular.element
        - https://owasp.org/www-chapter-london/assets/slides/OWASPLondon20170727_AngularJS.pdf
      category: security
      technology:
        - angularjs
      owasp:
        - A07:2017 - Cross-Site Scripting (XSS)
        - A03:2021 - Injection
      cwe2022-top25: true
      cwe2021-top25: true
      subcategory:
        - vuln
      likelihood: HIGH
      impact: MEDIUM
      license: Semgrep Rules License v1.0. For more details, visit
        semgrep.dev/legal/rules-license
      vulnerability_class:
        - Cross-Site-Scripting (XSS)
    languages:
      - javascript
      - typescript
    severity: WARNING
    mode: taint
    pattern-sources:
      - patterns:
          - pattern-either:
              - pattern: window.location.search
              - pattern: window.document.location.search
              - pattern: document.location.search
              - pattern: location.search
              - pattern: $location.search(...)
      - patterns:
          - pattern-either:
              - pattern: $DECODE(<... location.hash ...>)
              - pattern: $DECODE(<... window.location.hash ...>)
              - pattern: $DECODE(<... document.location.hash ...>)
              - pattern: $DECODE(<... location.href ...>)
              - pattern: $DECODE(<... window.location.href ...>)
              - pattern: $DECODE(<... document.location.href ...>)
              - pattern: $DECODE(<... document.URL ...>)
              - pattern: $DECODE(<... window.document.URL ...>)
              - pattern: $DECODE(<... document.location.href ...>)
              - pattern: $DECODE(<... document.location.href ...>)
              - pattern: $DECODE(<... $location.absUrl() ...>)
              - pattern: $DECODE(<... $location.url() ...>)
              - pattern: $DECODE(<... $location.hash() ...>)
          - metavariable-regex:
              metavariable: $DECODE
              regex: ^(unescape|decodeURI|decodeURIComponent)$
      - patterns:
          - pattern-inside: $http.$METHOD(...).$CONTINUE(function $FUNC($RES) {...})
          - metavariable-regex:
              metavariable: $METHOD
              regex: ^(get|delete|head|jsonp|post|put|patch)
          - pattern: $RES.data
    pattern-sinks:
      - patterns:
          - pattern-either:
              - pattern-inside: |
                  angular.element(...). ... .$SINK($QUERY)
              - pattern-inside: |
                  $ANGULAR = angular.element(...)
                  ...
                  $ANGULAR. ... .$SINK($QUERY)
          - metavariable-regex:
              metavariable: $SINK
              regex: ^(after|append|html|prepend|replaceWith|wrap)$
          - focus-metavariable: $QUERY
    pattern-sanitizers:
      - patterns:
          - pattern-either:
              - pattern: $sce.getTrustedHtml(...)
              - pattern: $sanitize(...)
              - pattern: DOMPurify.sanitize(...)

  - id: detect-angular-trust-as-method
    message: The use of $sce.trustAs can be dangerous if unsanitized user input
      flows through this API.
    metadata:
      references:
        - https://docs.angularjs.org/api/ng/service/$sce
        - https://owasp.org/www-chapter-london/assets/slides/OWASPLondon20170727_AngularJS.pdf
      category: security
      cwe:
        - "CWE-79: Improper Neutralization of Input During Web Page Generation
          ('Cross-site Scripting')"
      technology:
        - angular
      owasp:
        - A07:2017 - Cross-Site Scripting (XSS)
        - A03:2021 - Injection
      cwe2022-top25: true
      cwe2021-top25: true
      subcategory:
        - vuln
      likelihood: LOW
      impact: MEDIUM
      confidence: MEDIUM
      license: Semgrep Rules License v1.0. For more details, visit
        semgrep.dev/legal/rules-license
      vulnerability_class:
        - Cross-Site-Scripting (XSS)
    languages:
      - javascript
      - typescript
    severity: WARNING
    mode: taint
    pattern-sources:
      - patterns:
          - pattern-inside: |
              app.controller(..., function($scope,$sce) {
              ...
              });
          - pattern: $scope.$X
    pattern-sinks:
      - pattern: $sce.trustAs(...)
      - pattern: $sce.trustAsHtml(...)

  - id: knex-sqli
    message: "Detected SQL statement that is tainted by `$EVENT` object. This could
      lead to SQL injection if the variable is user-controlled and not properly
      sanitized. In order to prevent SQL injection, use parameterized queries or
      prepared statements instead. You can use parameterized statements like so:
      `knex.raw('SELECT $1 from table', [userinput])`"
    metadata:
      references:
        - https://knexjs.org/#Builder-fromRaw
        - https://knexjs.org/#Builder-whereRaw
      category: security
      owasp:
        - A01:2017 - Injection
        - A03:2021 - Injection
      cwe:
        - "CWE-89: Improper Neutralization of Special Elements used in an SQL
          Command ('SQL Injection')"
      technology:
        - aws-lambda
        - knex
      cwe2022-top25: true
      cwe2021-top25: true
      subcategory:
        - vuln
      likelihood: MEDIUM
      impact: HIGH
      confidence: MEDIUM
      license: Semgrep Rules License v1.0. For more details, visit
        semgrep.dev/legal/rules-license
      vulnerability_class:
        - SQL Injection
    languages:
      - javascript
      - typescript
    severity: WARNING
    mode: taint
    pattern-sources:
      - patterns:
          - pattern-either:
              - pattern-inside: |
                  exports.handler = function ($EVENT, ...) {
                    ...
                  }
              - pattern-inside: |
                  function $FUNC ($EVENT, ...) {...}
                  ...
                  exports.handler = $FUNC
              - pattern-inside: |
                  $FUNC = function ($EVENT, ...) {...}
                  ...
                  exports.handler = $FUNC
          - pattern: $EVENT
    pattern-sinks:
      - patterns:
          - focus-metavariable: $QUERY
          - pattern-either:
              - pattern: $KNEX.fromRaw($QUERY, ...)
              - pattern: $KNEX.whereRaw($QUERY, ...)
              - pattern: $KNEX.raw($QUERY, ...)
          - pattern-either:
              - pattern-inside: |
                  require('knex')
                  ...
              - pattern-inside: |
                  import 'knex'
                  ...

  - id: tainted-html-response
    message: Detected user input flowing into an HTML response. You may be
      accidentally bypassing secure methods of rendering HTML by manually
      constructing HTML and this could create a cross-site scripting
      vulnerability, which could let attackers steal sensitive user data.
    metadata:
      cwe:
        - "CWE-79: Improper Neutralization of Input During Web Page Generation
          ('Cross-site Scripting')"
      owasp:
        - A07:2017 - Cross-Site Scripting (XSS)
        - A03:2021 - Injection
      category: security
      technology:
        - aws-lambda
      cwe2022-top25: true
      cwe2021-top25: true
      subcategory:
        - vuln
      likelihood: MEDIUM
      impact: MEDIUM
      confidence: MEDIUM
      references:
        - https://owasp.org/Top10/A03_2021-Injection
      license: Semgrep Rules License v1.0. For more details, visit
        semgrep.dev/legal/rules-license
      vulnerability_class:
        - Cross-Site-Scripting (XSS)
    languages:
      - javascript
      - typescript
    severity: WARNING
    mode: taint
    pattern-sources:
      - patterns:
          - pattern-either:
              - pattern-inside: |
                  exports.handler = function ($EVENT, ...) {
                    ...
                  }
              - pattern-inside: |
                  function $FUNC ($EVENT, ...) {...}
                  ...
                  exports.handler = $FUNC
              - pattern-inside: |
                  $FUNC = function ($EVENT, ...) {...}
                  ...
                  exports.handler = $FUNC
          - pattern: $EVENT
    pattern-sinks:
      - patterns:
          - focus-metavariable: $BODY
          - pattern-inside: >
              {..., headers: {..., 'Content-Type': 'text/html', ...}, body:
              $BODY, ... }

  - id: tainted-sql-string
    message: Detected user input used to manually construct a SQL string. This is
      usually bad practice because manual construction could accidentally result
      in a SQL injection. An attacker could use a SQL injection to steal or
      modify contents of the database. Instead, use a parameterized query which
      is available by default in most database engines. Alternatively, consider
      using an object-relational mapper (ORM) such as Sequelize which will
      protect your queries.
    metadata:
      owasp:
        - A01:2017 - Injection
        - A03:2021 - Injection
      cwe:
        - "CWE-89: Improper Neutralization of Special Elements used in an SQL
          Command ('SQL Injection')"
      references:
        - https://owasp.org/www-community/attacks/SQL_Injection
      category: security
      technology:
        - express
      cwe2022-top25: true
      cwe2021-top25: true
      subcategory:
        - vuln
      likelihood: HIGH
      impact: MEDIUM
      confidence: MEDIUM
      license: Semgrep Rules License v1.0. For more details, visit
        semgrep.dev/legal/rules-license
      vulnerability_class:
        - SQL Injection
    languages:
      - javascript
      - typescript
    severity: ERROR
    mode: taint
    pattern-sources:
      - patterns:
          - pattern-either:
              - pattern-inside: function ... (...,$REQ, ...) {...}
          - pattern-either:
              - pattern: $REQ.query
              - pattern: $REQ.body
              - pattern: $REQ.params
              - pattern: $REQ.cookies
              - pattern: $REQ.headers
      - patterns:
          - pattern-either:
              - pattern-inside: |
                  (...,{ $REQ }: Request,...) => {...}
              - pattern-inside: |
                  (...,{ $REQ }: $EXPRESS.Request,...) => {...}
          - focus-metavariable: $REQ
          - pattern-either:
              - pattern: params
              - pattern: query
              - pattern: cookies
              - pattern: headers
              - pattern: body
    pattern-sinks:
      - patterns:
          - pattern-either:
              - patterns:
                  - pattern-either:
                      - pattern-inside: |
                          "$SQLSTR" + $EXPR
                      - pattern-inside: |
                          "$SQLSTR".concat($EXPR)
                      - pattern: util.format($SQLSTR, $EXPR)
                      - pattern: |
                          `$SQLSTR${$EXPR}...`
                  - metavariable-regex:
                      metavariable: $SQLSTR
                      regex: .*\b(?i)(select|delete|insert|create|update\s+.+\sset|alter|drop)\b.*
          - focus-metavariable: $EXPR

  - id: vm-runincontext-injection
    message: The `vm` module enables compiling and running code within V8 Virtual
      Machine contexts. The `vm` module is not a security mechanism. Do not use
      it to run untrusted code. If code passed to `vm` functions is controlled
      by user input it could result in command injection. Do not let user input
      in `vm` functions.
    metadata:
      owasp:
        - A03:2021 - Injection
      cwe:
        - "CWE-94: Improper Control of Generation of Code ('Code Injection')"
      category: security
      technology:
        - javascript
        - aws-lambda
      cwe2022-top25: true
      subcategory:
        - vuln
      likelihood: MEDIUM
      impact: MEDIUM
      confidence: MEDIUM
      references:
        - https://owasp.org/Top10/A03_2021-Injection
      license: Semgrep Rules License v1.0. For more details, visit
        semgrep.dev/legal/rules-license
      vulnerability_class:
        - Code Injection
    languages:
      - javascript
      - typescript
    severity: ERROR
    mode: taint
    pattern-sources:
      - patterns:
          - pattern: $EVENT
          - pattern-either:
              - pattern-inside: |
                  exports.handler = function ($EVENT, ...) {
                    ...
                  }
              - pattern-inside: |
                  function $FUNC ($EVENT, ...) {...}
                  ...
                  exports.handler = $FUNC
              - pattern-inside: |
                  $FUNC = function ($EVENT, ...) {...}
                  ...
                  exports.handler = $FUNC
    pattern-sinks:
      - patterns:
          - pattern-either:
              - pattern-inside: |
                  require('vm');
                  ...
              - pattern-inside: |
                  import 'vm'
                  ...
          - pattern-either:
              - pattern: $VM.runInContext($X,...)
              - pattern: $VM.runInNewContext($X,...)
              - pattern: $VM.runInThisContext($X,...)
              - pattern: $VM.compileFunction($X,...)
              - pattern: new $VM.Script($X,...)
              - pattern: new $VM.SourceTextModule($X,...)
              - pattern: runInContext($X,...)
              - pattern: runInNewContext($X,...)
              - pattern: runInThisContext($X,...)
              - pattern: compileFunction($X,...)
              - pattern: new Script($X,...)
              - pattern: new SourceTextModule($X,...)

  - id: detect-angular-sce-disabled
    message: $sceProvider is set to false. Disabling Strict Contextual escaping
      (SCE) in an AngularJS application could provide additional attack surface
      for XSS vulnerabilities.
    metadata:
      cwe:
        - "CWE-79: Improper Neutralization of Input During Web Page Generation
          ('Cross-site Scripting')"
      references:
        - https://docs.angularjs.org/api/ng/service/$sce
        - https://owasp.org/www-chapter-london/assets/slides/OWASPLondon20170727_AngularJS.pdf
      category: security
      technology:
        - angular
      owasp:
        - A07:2017 - Cross-Site Scripting (XSS)
        - A03:2021 - Injection
      cwe2022-top25: true
      cwe2021-top25: true
      subcategory:
        - vuln
      likelihood: HIGH
      impact: MEDIUM
      confidence: HIGH
      license: Semgrep Rules License v1.0. For more details, visit
        semgrep.dev/legal/rules-license
      vulnerability_class:
        - Cross-Site-Scripting (XSS)
    languages:
      - javascript
      - typescript
    severity: ERROR
    pattern: |
      $sceProvider.enabled(false);

  - id: deno-dangerous-run
    message: Detected non-literal calls to Deno.run(). This could lead to a command
      injection vulnerability.
    metadata:
      cwe:
        - "CWE-78: Improper Neutralization of Special Elements used in an OS
          Command ('OS Command Injection')"
      owasp:
        - A01:2017 - Injection
        - A03:2021 - Injection
      category: security
      technology:
        - deno
      references:
        - https://deno.land/manual/examples/subprocess#simple-example
      cwe2022-top25: true
      cwe2021-top25: true
      subcategory:
        - vuln
      likelihood: LOW
      impact: HIGH
      confidence: MEDIUM
      license: Semgrep Rules License v1.0. For more details, visit
        semgrep.dev/legal/rules-license
      vulnerability_class:
        - Command Injection
    languages:
      - javascript
      - typescript
    severity: ERROR
    mode: taint
    pattern-sources:
      - patterns:
          - pattern-inside: function ... (..., $ARG,...) {...}
          - focus-metavariable: $ARG
    pattern-sinks:
      - patterns:
          - pattern-either:
              - pattern: |
                  Deno.run({cmd: [$INPUT,...]},...)
              - pattern: >
                  Deno.run({cmd:
                  ["=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",$INPUT,...]},...)
              - patterns:
                  - pattern: |
                      Deno.run({cmd: [$CMD,"-c",$INPUT,...]},...)
                  - pattern-inside: |
                      $CMD = "=~/(sh|bash|ksh|csh|tcsh|zsh)/"
                      ...
          - focus-metavariable: $INPUT

  - id: express-cookie-session-default-name
    message: "Don’t use the default session cookie name Using the default session
      cookie name can open your app to attacks. The security issue posed is
      similar to X-Powered-By: a potential attacker can use it to fingerprint
      the server and target attacks accordingly."
    severity: WARNING
    languages:
      - javascript
      - typescript
    metadata:
      cwe:
        - "CWE-522: Insufficiently Protected Credentials"
      owasp:
        - A02:2017 - Broken Authentication
        - A04:2021 - Insecure Design
      source-rule-url: https://expressjs.com/en/advanced/best-practice-security.html
      category: security
      technology:
        - express
      cwe2021-top25: true
      subcategory:
        - vuln
      likelihood: HIGH
      impact: LOW
      confidence: MEDIUM
      references:
        - https://owasp.org/Top10/A04_2021-Insecure_Design
      license: Semgrep Rules License v1.0. For more details, visit
        semgrep.dev/legal/rules-license
      vulnerability_class:
        - Cryptographic Issues
    patterns:
      - pattern-either:
          - pattern-inside: |
              $SESSION = require('cookie-session');
              ...
          - pattern-inside: |
              $SESSION = require('express-session');
              ...
      - pattern: $SESSION(...)
      - pattern-not-inside: $SESSION(<... {name:...} ...>,...)
      - pattern-not-inside: |
          $OPTS = <... {name:...} ...>;
          ...
          $SESSION($OPTS,...);
      - pattern-not-inside: |
          $OPTS = ...;
          ...
          $OPTS.name = ...;
          ...
          $SESSION($OPTS,...);

  - id: express-libxml-noent
    message: The libxml library processes user-input with the `noent` attribute is
      set to `true` which can lead to being vulnerable to XML External Entities
      (XXE) type attacks. It is recommended to set `noent` to `false` when using
      this feature to ensure you are protected.
    options:
      interfile: true
    metadata:
      interfile: true
      references:
        - https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html
      technology:
        - express
      category: security
      cwe:
        - "CWE-611: Improper Restriction of XML External Entity Reference"
      owasp:
        - A04:2017 - XML External Entities (XXE)
        - A05:2021 - Security Misconfiguration
      cwe2022-top25: true
      cwe2021-top25: true
      subcategory:
        - vuln
      likelihood: HIGH
      impact: HIGH
      confidence: HIGH
      license: Semgrep Rules License v1.0. For more details, visit
        semgrep.dev/legal/rules-license
      vulnerability_class:
        - XML Injection
    languages:
      - javascript
      - typescript
    severity: ERROR
    mode: taint
    pattern-sources:
      - patterns:
          - pattern-either:
              - pattern-inside: function ... ($REQ, $RES) {...}
              - pattern-inside: function ... ($REQ, $RES, $NEXT) {...}
              - patterns:
                  - pattern-either:
                      - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES) {...})
                      - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES, $NEXT) {...})
                  - metavariable-regex:
                      metavariable: $METHOD
                      regex: ^(get|post|put|head|delete|options)$
          - pattern-either:
              - pattern: $REQ.query
              - pattern: $REQ.body
              - pattern: $REQ.params
              - pattern: $REQ.cookies
              - pattern: $REQ.headers
              - pattern: $REQ.files.$ANYTHING.data.toString('utf8')
              - pattern: $REQ.files.$ANYTHING['data'].toString('utf8')
      - patterns:
          - pattern-either:
              - pattern-inside: |
                  ({ $REQ }: Request,$RES: Response, $NEXT: NextFunction) =>
                  {...}
              - pattern-inside: |
                  ({ $REQ }: Request,$RES: Response) => {...}
          - focus-metavariable: $REQ
          - pattern-either:
              - pattern: params
              - pattern: query
              - pattern: cookies
              - pattern: headers
              - pattern: body
              - pattern: files.$ANYTHING.data.toString('utf8')
              - pattern: files.$ANYTHING['data'].toString('utf8')
    pattern-sinks:
      - pattern-either:
          - patterns:
              - pattern-either:
                  - pattern-inside: |
                      $XML = require('$IMPORT')
                      ...
                  - pattern-inside: |
                      import $XML from '$IMPORT'
                        ...
                  - pattern-inside: |
                      import * as $XML from '$IMPORT'
                      ...
              - metavariable-regex:
                  metavariable: $IMPORT
                  regex: ^(libxmljs|libxmljs2)$
              - pattern-inside: $XML.$FUNC($QUERY, {...,noent:true,...})
              - metavariable-regex:
                  metavariable: $FUNC
                  regex: ^(parseXmlString|parseXml)$
              - focus-metavariable: $QUERY

  - id: express-ssrf
    message: "The following request $REQUEST.$METHOD() was found to be crafted from
      user-input `$REQ` which can lead to Server-Side Request Forgery (SSRF)
      vulnerabilities. It is recommended where possible to not allow user-input
      to craft the base request, but to be treated as part of the path or query
      parameter. When user-input is necessary to craft the request, it is
      recommeneded to follow OWASP best practices to prevent abuse. "
    metadata:
      references:
        - https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html
      cwe:
        - "CWE-918: Server-Side Request Forgery (SSRF)"
      technology:
        - express
      category: security
      owasp:
        - A10:2021 - Server-Side Request Forgery (SSRF)
      cwe2022-top25: true
      cwe2021-top25: true
      subcategory:
        - vuln
      likelihood: MEDIUM
      impact: HIGH
      confidence: MEDIUM
      license: Semgrep Rules License v1.0. For more details, visit
        semgrep.dev/legal/rules-license
      vulnerability_class:
        - Server-Side Request Forgery (SSRF)
    languages:
      - javascript
      - typescript
    severity: WARNING
    mode: taint
    options:
      taint_unify_mvars: true
    pattern-sources:
      - patterns:
          - pattern-either:
              - pattern-inside: function ... ($REQ, ...) {...}
          - pattern-either:
              - pattern: $REQ.query
              - pattern: $REQ.body
              - pattern: $REQ.params
              - pattern: $REQ.cookies
              - pattern: $REQ.headers
      - patterns:
          - pattern-either:
              - pattern-inside: |
                  ({ $REQ }: Request,...) =>
                  {...}
              - pattern-inside: |
                  ({ $REQ }: $EXPRESS.Request,...) => {...}
          - focus-metavariable: $REQ
          - pattern-either:
              - pattern: params
              - pattern: query
              - pattern: cookies
              - pattern: headers
              - pattern: body
    pattern-sinks:
      - patterns:
          - pattern-either:
              - pattern-inside: |
                  $REQUEST = require('request')
                  ...
              - pattern-inside: |
                  import * as $REQUEST from 'request'
                  ...
              - pattern-inside: |
                  import $REQUEST from 'request'
                  ...
          - pattern-either:
              - pattern: $REQUEST.$METHOD("$HTTP"+$REQ. ... .$VALUE)
              - pattern: $REQUEST.$METHOD("$HTTP"+$REQ. ... .$VALUE + $...A)
              - pattern: $REQUEST.$METHOD(`$HTTP${$REQ. ... .$VALUE}...`)
              - pattern: $REQUEST.$METHOD("$HTTP"+$REQ.$VALUE[...])
              - pattern: $REQUEST.$METHOD("$HTTP"+$REQ.$VALUE[...] + $...A)
              - pattern: $REQUEST.$METHOD(`$HTTP${$REQ.$VALUE[...]}...`)
          - metavariable-regex:
              metavariable: $METHOD
              regex: ^(get|post|put|patch|del|head|delete)$
          - metavariable-regex:
              metavariable: $HTTP
              regex: ^(https?:\/\/|//)$
          - pattern-either:
              - pattern: $REQ. ... .$VALUE
      - patterns:
          - pattern-either:
              - pattern-inside: |
                  $REQUEST = require('request')
                  ...
              - pattern-inside: |
                  import * as $REQUEST from 'request'
                  ...
              - pattern-inside: |
                  import $REQUEST from 'request'
                  ...
          - pattern-either:
              - pattern: $REQUEST.$METHOD($REQ. ... .$VALUE,...)
              - pattern: $REQUEST.$METHOD($REQ. ... .$VALUE + $...A,...)
              - pattern: $REQUEST.$METHOD(`${$REQ. ... .$VALUE}...`,...)
          - pattern: $REQ. ... .$VALUE
          - metavariable-regex:
              metavariable: $METHOD
              regex: ^(get|post|put|patch|del|head|delete)$
      - patterns:
          - pattern-either:
              - pattern-inside: |
                  $REQUEST = require('request')
                  ...
              - pattern-inside: |
                  import * as $REQUEST from 'request'
                  ...
              - pattern-inside: |
                  import $REQUEST from 'request'
                  ...
          - pattern-either:
              - pattern: $REQUEST.$METHOD($REQ.$VALUE['...'],...)
              - pattern: $REQUEST.$METHOD($REQ.$VALUE['...'] + $...A,...)
              - pattern: $REQUEST.$METHOD(`${$REQ.$VALUE['...']}...`,...)
          - pattern: $REQ.$VALUE
          - metavariable-regex:
              metavariable: $METHOD
              regex: ^(get|post|put|patch|del|head|delete)$
      - patterns:
          - pattern-either:
              - pattern-inside: |
                  $REQUEST = require('request')
                  ...
              - pattern-inside: |
                  import * as $REQUEST from 'request'
                  ...
              - pattern-inside: |
                  import $REQUEST from 'request'
                  ...
          - pattern-either:
              - pattern-inside: |
                  $ASSIGN = $REQ. ... .$VALUE
                  ...
              - pattern-inside: |
                  $ASSIGN = $REQ. ... .$VALUE['...']
                  ...
              - pattern-inside: |
                  $ASSIGN = $REQ. ... .$VALUE + $...A
                  ...
              - pattern-inside: |
                  $ASSIGN = $REQ. ... .$VALUE['...'] + $...A
                  ...     
              - pattern-inside: |
                  $ASSIGN = `${$REQ. ... .$VALUE}...`
                  ...
              - pattern-inside: |
                  $ASSIGN = `${$REQ. ... .$VALUE['...']}...`
                  ... 
              - patterns:
                  - pattern-either:
                      - pattern-inside: |
                          $ASSIGN = "$HTTP"+ $REQ. ... .$VALUE
                          ...
                      - pattern-inside: |
                          $ASSIGN = "$HTTP"+$REQ. ... .$VALUE + $...A
                          ...
                      - pattern-inside: |
                          $ASSIGN = "$HTTP"+$REQ.$VALUE[...]
                          ...
                      - pattern-inside: |
                          $ASSIGN = "$HTTP"+$REQ.$VALUE[...] + $...A
                          ...
                      - pattern-inside: |
                          $ASSIGN = `$HTTP${$REQ.$VALUE[...]}...`
                          ...
                  - metavariable-regex:
                      metavariable: $HTTP
                      regex: ^(https?:\/\/|//)$
          - pattern-either:
              - pattern: $REQUEST.$METHOD($ASSIGN,...)
              - pattern: $REQUEST.$METHOD($ASSIGN + $...FOO,...)
              - pattern: $REQUEST.$METHOD(`${$ASSIGN}...`,...)
              - patterns:
                  - pattern-either:
                      - pattern: $REQUEST.$METHOD("$HTTP"+$ASSIGN,...)
                      - pattern: $REQUEST.$METHOD("$HTTP"+$ASSIGN + $...A,...)
                      - pattern: $REQUEST.$METHOD(`$HTTP${$ASSIGN}...`,...)
                  - metavariable-regex:
                      metavariable: $HTTP
                      regex: ^(https?:\/\/|//)$
          - pattern: $ASSIGN
          - metavariable-regex:
              metavariable: $METHOD
              regex: ^(get|post|put|patch|del|head|delete)$

  - id: res-render-injection
    message: User controllable data `$REQ` enters `$RES.render(...)` this can lead
      to the loading of other HTML/templating pages that they may not be
      authorized to render. An attacker may attempt to use directory traversal
      techniques e.g. `../folder/index` to access other HTML pages on the file
      system. Where possible, do not allow users to define what should
      be  loaded in $RES.render or use an allow list for the existing
      application.
    options:
      interfile: true
    metadata:
      interfile: true
      owasp:
        - A01:2021 - Broken Access Control
      cwe:
        - "CWE-706: Use of Incorrectly-Resolved Name or Reference"
      category: security
      technology:
        - express
      references:
        - http://expressjs.com/en/4x/api.html#res.render
      subcategory:
        - vuln
      likelihood: MEDIUM
      impact: MEDIUM
      confidence: MEDIUM
      license: Semgrep Rules License v1.0. For more details, visit
        semgrep.dev/legal/rules-license
      vulnerability_class:
        - Improper Authorization
    languages:
      - javascript
      - typescript
    severity: WARNING
    mode: taint
    pattern-sources:
      - patterns:
          - pattern-either:
              - pattern-inside: function ... ($REQ, $RES) {...}
              - pattern-inside: function ... ($REQ, $RES, $NEXT) {...}
              - patterns:
                  - pattern-either:
                      - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES) {...})
                      - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES, $NEXT) {...})
                  - metavariable-regex:
                      metavariable: $METHOD
                      regex: ^(get|post|put|head|delete|options)$
          - pattern-either:
              - pattern: $REQ.query
              - pattern: $REQ.body
              - pattern: $REQ.params
              - pattern: $REQ.cookies
              - pattern: $REQ.headers
      - patterns:
          - pattern-either:
              - pattern-inside: |
                  ({ $REQ }: Request,$RES: Response, $NEXT: NextFunction) =>
                  {...}
              - pattern-inside: |
                  ({ $REQ }: Request,$RES: Response) => {...}
          - focus-metavariable: $REQ
          - pattern-either:
              - pattern: params
              - pattern: query
              - pattern: cookies
              - pattern: headers
              - pattern: body
    pattern-sinks:
      - patterns:
          - pattern-either:
              - pattern: $RES.render($SINK, ...)
          - focus-metavariable: $SINK

  - id: direct-response-write
    message: Detected directly writing to a Response object from user-defined input.
      This bypasses any HTML escaping and may expose your application to a
      Cross-Site-scripting (XSS) vulnerability. Instead, use 'resp.render()' to
      render safely escaped HTML.
    options:
      interfile: true
    metadata:
      interfile: true
      references:
        - https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html
      owasp:
        - A07:2017 - Cross-Site Scripting (XSS)
        - A03:2021 - Injection
      cwe:
        - "CWE-79: Improper Neutralization of Input During Web Page Generation
          ('Cross-site Scripting')"
      category: security
      technology:
        - express
      cwe2022-top25: true
      cwe2021-top25: true
      subcategory:
        - vuln
      likelihood: MEDIUM
      impact: MEDIUM
      confidence: MEDIUM
      vulnerability_class:
        - Cross-Site-Scripting (XSS)
      license: Semgrep Rules License v1.0. For more details, visit
        semgrep.dev/legal/rules-license
    languages:
      - javascript
      - typescript
    severity: WARNING
    mode: taint
    pattern-sources:
      - patterns:
          - pattern-either:
              - pattern-inside: function ... ($REQ, $RES) {...}
              - pattern-inside: function ... ($REQ, $RES, $NEXT) {...}
              - patterns:
                  - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES) {...})
                  - metavariable-regex:
                      metavariable: $METHOD
                      regex: ^(get|post|put|head|delete|options)
          - pattern-not-inside: |
              function ... ($REQ, $RES) {
                  ...
                  $RES.$SET('Content-Type', '$TYPE')
              }
          - pattern-not-inside: |
              $APP.$METHOD(..., function $FUNC($REQ, $RES) {
                  ...
                  $RES.$SET('Content-Type', '$TYPE')
              })
          - pattern-not-inside: |
              function ... ($REQ, $RES, $NEXT) {
                  ...
                  $RES.$SET('Content-Type', '$TYPE')
              }
          - pattern-not-inside: |
              function ... ($REQ, $RES) {
                  ...
                  $RES.set('$TYPE')
              }
          - pattern-not-inside: |
              $APP.$METHOD(..., function $FUNC($REQ, $RES) {
                  ...
                  $RES.set('$TYPE')
              })
          - pattern-not-inside: |
              function ... ($REQ, $RES, $NEXT) {
                  ...
                  $RES.set('$TYPE')
              }
          - pattern-either:
              - pattern: $REQ.query
              - pattern: $REQ.body
              - pattern: $REQ.params
      - patterns:
          - pattern-either:
              - pattern-inside: |
                  ({ $REQ }: Request,$RES: Response, $NEXT: NextFunction) =>
                  {...}
              - pattern-inside: |
                  ({ $REQ }: Request,$RES: Response) => {...}
          - pattern-not-inside: |
              ({ $REQ }: Request,$RES: Response, $NEXT: NextFunction) =>
              {
                  ...
                  $RES.$SET('Content-Type', '$TYPE')
              }
          - pattern-not-inside: |
              ({ $REQ }: Request,$RES: Response) => {
                  ...
                  $RES.$SET('Content-Type', '$TYPE')
              }
          - pattern-not-inside: |
              ({ $REQ }: Request,$RES: Response, $NEXT: NextFunction) =>
              {
                  ...
                  $RES.set('$TYPE')
              }
          - focus-metavariable: $REQ
          - pattern-either:
              - pattern: params
              - pattern: query
              - pattern: body
    pattern-sinks:
      - patterns:
          - pattern-inside: function ... (..., $RES,...) {...}
          - pattern-either:
              - pattern: $RES.write($ARG)
              - pattern: $RES.send($ARG)
          - pattern-not: $RES. ... .set('...'). ... .send($ARG)
          - pattern-not: $RES. ... .type('...'). ... .send($ARG)
          - pattern-not-inside: $RES.$METHOD({ ... })
          - focus-metavariable: $ARG
    pattern-sanitizers:
      - patterns:
          - pattern-either:
              - pattern-inside: |
                  import $S from "underscore.string"
                  ...
              - pattern-inside: |
                  import * as $S from "underscore.string"
                  ...
              - pattern-inside: |
                  import $S from "underscore.string"
                  ...
              - pattern-inside: |
                  $S = require("underscore.string")
                  ...
          - pattern-either:
              - pattern: $S.escapeHTML(...)
      - patterns:
          - pattern-either:
              - pattern-inside: |
                  import $S from "dompurify"
                  ...
              - pattern-inside: |
                  import { ..., $S,... } from "dompurify"
                  ...
              - pattern-inside: |
                  import * as $S from "dompurify"
                  ...
              - pattern-inside: |
                  $S = require("dompurify")
                  ...
              - pattern-inside: |
                  import $S from "isomorphic-dompurify"
                  ...
              - pattern-inside: |
                  import * as $S from "isomorphic-dompurify"
                  ...
              - pattern-inside: |
                  $S = require("isomorphic-dompurify")
                  ...
          - pattern-either:
              - patterns:
                  - pattern-inside: |
                      $VALUE = $S(...)
                      ...
                  - pattern: $VALUE.sanitize(...)
              - patterns:
                  - pattern-inside: |
                      $VALUE = $S.sanitize
                      ...
                  - pattern: $S(...)
              - pattern: $S.sanitize(...)
              - pattern: $S(...)
      - patterns:
          - pattern-either:
              - pattern-inside: |
                  import $S from 'xss';
                  ...
              - pattern-inside: |
                  import * as $S from 'xss';
                  ...
              - pattern-inside: |
                  $S = require("xss")
                  ...
          - pattern: $S(...)
      - patterns:
          - pattern-either:
              - pattern-inside: |
                  import $S from 'sanitize-html';
                  ...
              - pattern-inside: |
                  import * as $S from "sanitize-html";
                  ...
              - pattern-inside: |
                  $S = require("sanitize-html")
                  ...
          - pattern: $S(...)
      - patterns:
          - pattern-either:
              - pattern-inside: |
                  $S = new Remarkable()
                  ...
          - pattern: $S.render(...)
      - patterns:
          - pattern-either:
              - pattern-inside: |
                  import $S from 'express-xss-sanitizer';
                  ...
              - pattern-inside: |
                  import * as $S from "express-xss-sanitizer";
                  ...
              - pattern-inside: |
                  const { ..., $S, ... } = require('express-xss-sanitizer');
                  ...
              - pattern-inside: |
                  var { ..., $S, ... } = require('express-xss-sanitizer');
                  ...
              - pattern-inside: |
                  let { ...,$S,... } = require('express-xss-sanitizer');
                  ...
              - pattern-inside: |
                  $S = require("express-xss-sanitizer")
                  ...
          - pattern: $S(...)
      - patterns:
          - pattern: $RES. ... .type('$F'). ... .send(...)
          - metavariable-regex:
              metavariable: $F
              regex: (?!.*text/html)
      - patterns:
          - pattern-inside: |
              $X = [...];
              ...
          - pattern: |
              if(<... !$X.includes($SOURCE)...>) {
                  ...
                  return ...
              }
              ...
          - pattern: $SOURCE

  - id: anonymous-ldap-bind
    metadata:
      cwe:
        - "CWE-287: Improper Authentication"
      owasp:
        - A02:2017 - Broken Authentication
        - A07:2021 - Identification and Authentication Failures
      source-rule-url: https://find-sec-bugs.github.io/bugs.htm#LDAP_ANONYMOUS
      category: security
      technology:
        - kotlin
      references:
        - https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures
      cwe2022-top25: true
      cwe2021-top25: true
      subcategory:
        - vuln
      likelihood: LOW
      impact: MEDIUM
      confidence: MEDIUM
      license: Semgrep Rules License v1.0. For more details, visit
        semgrep.dev/legal/rules-license
      vulnerability_class:
        - Improper Authentication
    message: Detected anonymous LDAP bind. This permits anonymous users to execute
      LDAP statements. Consider enforcing authentication for LDAP. See
      https://docs.oracle.com/javase/tutorial/jndi/ldap/auth_mechs.html for more
      information.
    severity: WARNING
    pattern: |
      $ENV.put($CTX.SECURITY_AUTHENTICATION, "none")
      ...
      $DCTX = InitialDirContext($ENV, ...)
    languages:
      - kt

  - id: bypass-tls-verification
    message: Checks for setting the environment variable
      NODE_TLS_REJECT_UNAUTHORIZED to 0, which disables TLS verification. This
      should only be used for debugging purposes. Setting the option
      rejectUnauthorized to false bypasses verification against the list of
      trusted CAs, which also leads to insecure transport. These options lead to
      vulnerability to MTM attacks, and should not be used.
    severity: WARNING
    metadata:
      likelihood: MEDIUM
      impact: MEDIUM
      confidence: MEDIUM
      category: security
      cwe: "CWE-319: Cleartext Transmission of Sensitive Information"
      owasp: A03:2017 - Sensitive Data Exposure
      references:
        - https://nodejs.org/api/https.html#https_https_request_options_callback
        - https://stackoverflow.com/questions/20433287/node-js-request-cert-has-expired#answer-29397100
      subcategory:
        - vuln
      technology:
        - node.js
      vulnerability: Insecure Transport
      license: Semgrep Rules License v1.0. For more details, visit
        semgrep.dev/legal/rules-license
      vulnerability_class:
        - Mishandled Sensitive Information
    languages:
      - javascript
      - typescript
    pattern-either:
      - pattern: |
          process.env["NODE_TLS_REJECT_UNAUTHORIZED"] = 0;
      - pattern: |
          {rejectUnauthorized:false}

  - id: disallow-old-tls-versions1
    message: Detects direct creations of $HTTPS servers that don't disallow SSL v2,
      SSL v3, and TLS v1. These protocols are deprecated due to POODLE, man in
      the middle attacks, and other vulnerabilities.
    severity: WARNING
    metadata:
      likelihood: MEDIUM
      impact: MEDIUM
      confidence: MEDIUM
      category: security
      cwe: "CWE-319: Cleartext Transmission of Sensitive Information"
      owasp: A03:2017 - Sensitive Data Exposure
      references:
        - https://us-cert.cisa.gov/ncas/alerts/TA14-290A
        - https://stackoverflow.com/questions/40434934/how-to-disable-the-ssl-3-0-and-tls-1-0-in-nodejs
        - https://nodejs.org/api/https.html#https_https_createserver_options_requestlistener
      subcategory:
        - vuln
      technology:
        - node.js
      vulnerability: Insecure Transport
      license: Semgrep Rules License v1.0. For more details, visit
        semgrep.dev/legal/rules-license
      vulnerability_class:
        - Mishandled Sensitive Information
    languages:
      - javascript
      - typescript
    patterns:
      - pattern-either:
          - pattern-inside: |
              $CONST = require('crypto');
              ...
          - pattern-inside: |
              $CONST = require('constants');
              ...
      - pattern-inside: |
          $HTTPS = require('https');
          ...
      - pattern: |
          $HTTPS.createServer(...).$FUNC(...);
      - pattern-not: >
          $HTTPS.createServer({secureOptions: $CONST.SSL_OP_NO_TLSv1 |
          $CONST.SSL_OP_NO_SSLv3 | $CONST.SSL_OP_NO_SSLv2 }, ...).$FUNC(...);
      - pattern-not: >
          $HTTPS.createServer({secureOptions: $CONST.SSL_OP_NO_TLSv1 |
          $CONST.SSL_OP_NO_SSLv2 |$CONST.SSL_OP_NO_SSLv3 }, ...).$FUNC(...);
      - pattern-not: >
          $HTTPS.createServer({secureOptions: $CONST.SSL_OP_NO_SSLv2
          |$CONST.SSL_OP_NO_SSLv3 |$CONST.SSL_OP_NO_TLSv1 }, ...).$FUNC(...);
      - pattern-not: >
          $HTTPS.createServer({secureOptions: $CONST.SSL_OP_NO_SSLv2
          |$CONST.SSL_OP_NO_TLSv1 | $CONST.SSL_OP_NO_SSLv3}, ...).$FUNC(...);
      - pattern-not: >
          $HTTPS.createServer({secureOptions:$CONST.SSL_OP_NO_SSLv3 |
          $CONST.SSL_OP_NO_SSLv2 |$CONST.SSL_OP_NO_TLSv1}, ...).$FUNC(...);
      - pattern-not: >
          $HTTPS.createServer({secureOptions:$CONST.SSL_OP_NO_SSLv3 |
          $CONST.SSL_OP_NO_TLSv1| $CONST.SSL_OP_NO_SSLv2}, ...).$FUNC(...);

  - id: express-xml2json-xxe-event
    message: Xml Parser is used inside Request Event. Make sure that unverified user
      data can not reach the XML Parser, as it can result in XML External or
      Internal Entity (XXE) Processing vulnerabilities
    metadata:
      owasp:
        - A04:2017 - XML External Entities (XXE)
        - A05:2021 - Security Misconfiguration
      cwe:
        - "CWE-611: Improper Restriction of XML External Entity Reference"
      category: security
      technology:
        - express
      references:
        - https://www.npmjs.com/package/xml2json
      cwe2022-top25: true
      cwe2021-top25: true
      subcategory:
        - vuln
      likelihood: MEDIUM
      impact: HIGH
      confidence: MEDIUM
      license: Semgrep Rules License v1.0. For more details, visit
        semgrep.dev/legal/rules-license
      vulnerability_class:
        - XML Injection
    languages:
      - javascript
      - typescript
    severity: WARNING
    mode: taint
    pattern-sources:
      - patterns:
          - pattern-either:
              - pattern-inside: function ... ($REQ, $RES) {...}
              - pattern-inside: function ... ($REQ, $RES, $NEXT) {...}
              - patterns:
                  - pattern-either:
                      - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES) {...})
                      - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES, $NEXT) {...})
                  - metavariable-regex:
                      metavariable: $METHOD
                      regex: ^(get|post|put|head|delete|options)$
          - pattern-either:
              - pattern: $REQ.query
              - pattern: $REQ.body
              - pattern: $REQ.params
              - pattern: $REQ.cookies
              - pattern: $REQ.headers
      - patterns:
          - pattern-either:
              - pattern-inside: >
                  ({ $REQ }: Request,$RES: Response, $NEXT: NextFunction) =>
                  {...}
              - pattern-inside: |
                  ({ $REQ }: Request,$RES: Response) => {...}
          - focus-metavariable: $REQ
          - pattern-either:
              - pattern: params
              - pattern: query
              - pattern: cookies
              - pattern: headers
              - pattern: body
    pattern-sinks:
      - patterns:
          - pattern-either:
              - pattern-inside: |
                  require('xml2json');
                  ...
              - pattern-inside: |
                  import 'xml2json';
                  ...
          - pattern: $REQ.on('...', function(...) { ... $EXPAT.toJson($INPUT,...); ... })
          - focus-metavariable: $INPUT


  - id: aws-cdk-bucket-enforcessl
    message: Bucket $X is not set to enforce encryption-in-transit, if not explictly
      setting this on the bucket policy - the property "enforceSSL" should be
      set to true
    metadata:
      cwe:
        - "CWE-319: Cleartext Transmission of Sensitive Information"
      category: security
      technology:
        - AWS-CDK
      references:
        - https://docs.aws.amazon.com/AmazonS3/latest/userguide/security-best-practices.html
      owasp:
        - A03:2017 - Sensitive Data Exposure
        - A02:2021 - Cryptographic Failures
      subcategory:
        - vuln
      likelihood: MEDIUM
      impact: MEDIUM
      confidence: MEDIUM
      license: Semgrep Rules License v1.0. For more details, visit
        semgrep.dev/legal/rules-license
      vulnerability_class:
        - Mishandled Sensitive Information
    languages:
      - ts
    severity: ERROR
    pattern-either:
      - patterns:
          - pattern-inside: |
              import {Bucket} from '@aws-cdk/aws-s3';
              ...
          - pattern: const $X = new Bucket(...)
          - pattern-not: |
              const $X = new Bucket(..., {enforceSSL: true}, ...)
      - patterns:
          - pattern-inside: |
              import * as $Y from '@aws-cdk/aws-s3';
              ...
          - pattern: const $X = new $Y.Bucket(...)
          - pattern-not: |
              const $X = new $Y.Bucket(..., {..., enforceSSL: true, ...})

  - id: ftp-request
    message: 'Checks for lack of usage of the "secure: true" option when sending ftp
      requests through the nodejs ftp module. This leads to unencrypted traffic
      being sent to the ftp server. There are other options such as "implicit"
      that still does not encrypt all traffic. ftp is the most utilized npm ftp
      module.'
    severity: WARNING
    metadata:
      likelihood: MEDIUM
      impact: MEDIUM
      confidence: MEDIUM
      category: security
      cwe: "CWE-319: Cleartext Transmission of Sensitive Information"
      owasp: A03:2017 - Sensitive Data Exposure
      references:
        - https://www.npmjs.com/package/ftp
        - https://openbase.io/js/ftp
      subcategory:
        - vuln
      technology:
        - node.js
      vulnerability: Insecure Transport
      license: Semgrep Rules License v1.0. For more details, visit
        semgrep.dev/legal/rules-license
      vulnerability_class:
        - Mishandled Sensitive Information
    languages:
      - javascript
      - typescript
    patterns:
      - pattern-inside: |
          $X = require('ftp');
          ...
          $C = new $X();
          ...
      - pattern-not-inside: |
          $OPTIONS = {secure: true};
          ...
      - pattern: |
          $C.connect($OPTIONS,...);
      - pattern-not: |
          $C.connect({...,secure: true});

  - id: ecb-cipher
    metadata:
      cwe:
        - "CWE-327: Use of a Broken or Risky Cryptographic Algorithm"
      owasp:
        - A03:2017 - Sensitive Data Exposure
        - A02:2021 - Cryptographic Failures
      source-rule-url: https://find-sec-bugs.github.io/bugs.htm#ECB_MODE
      category: security
      technology:
        - kotlin
      references:
        - https://owasp.org/Top10/A02_2021-Cryptographic_Failures
      subcategory:
        - vuln
      likelihood: LOW
      impact: MEDIUM
      confidence: MEDIUM
      license: Semgrep Rules License v1.0. For more details, visit
        semgrep.dev/legal/rules-license
      vulnerability_class:
        - Cryptographic Issues
    message: Cipher in ECB mode is detected. ECB mode produces the same output for
      the same input each time which allows an attacker to intercept and replay
      the data. Further, ECB mode does not provide any integrity checking. See
      https://find-sec-bugs.github.io/bugs.htm#CIPHER_INTEGRITY.
    severity: WARNING
    languages:
      - kt
    patterns:
      - pattern-either:
          - pattern: |
              val $VAR : Cipher = $CIPHER.getInstance($MODE)
          - pattern: |
              var $VAR : Cipher = $CIPHER.getInstance($MODE)
          - pattern: |
              val $VAR = $CIPHER.getInstance($MODE)
          - pattern: |
              var $VAR = $CIPHER.getInstance($MODE)
      - metavariable-regex:
          metavariable: $MODE
          regex: .*ECB.*

  - id: raw-html-concat
    message: User controlled data in a HTML string may result in XSS
    metadata:
      cwe:
        - "CWE-79: Improper Neutralization of Input During Web Page Generation
          ('Cross-site Scripting')"
      owasp:
        - A07:2017 - Cross-Site Scripting (XSS)
        - A03:2021 - Injection
      references:
        - https://owasp.org/www-community/attacks/xss/
      category: security
      technology:
        - browser
      cwe2022-top25: true
      cwe2021-top25: true
      subcategory:
        - vuln
      likelihood: MEDIUM
      impact: MEDIUM
      confidence: MEDIUM
      license: Semgrep Rules License v1.0. For more details, visit
        semgrep.dev/legal/rules-license
      vulnerability_class:
        - Cross-Site-Scripting (XSS)
    languages:
      - javascript
      - typescript
    severity: WARNING
    mode: taint
    pattern-sources:
      - patterns:
          - pattern-either:
              - pattern: location.href
              - pattern: location.hash
              - pattern: location.search
              - pattern: $WINDOW. ... .location.href
              - pattern: $WINDOW. ... .location.hash
              - pattern: $WINDOW. ... .location.search
    pattern-sinks:
      - patterns:
          - pattern-either:
              - patterns:
                  - pattern: $STRING + $EXPR
                  - pattern-not: $STRING + "..."
                  - metavariable-pattern:
                      patterns:
                        - pattern: <$TAG ...
                        - pattern-not: <$TAG ...>...</$TAG>...
                      metavariable: $STRING
                      language: generic
              - patterns:
                  - pattern: $EXPR + $STRING
                  - pattern-not: '"..." + $STRING'
                  - metavariable-pattern:
                      patterns:
                        - pattern: ... </$TAG
                      metavariable: $STRING
                      language: generic
              - patterns:
                  - pattern: "[..., $STRING, ...].join(...)"
                  - metavariable-pattern:
                      patterns:
                        - pattern: <$TAG ...
                      metavariable: $STRING
                      language: generic
              - patterns:
                  - pattern: "[..., $STRING, ...].join(...)"
                  - metavariable-pattern:
                      patterns:
                        - pattern: ... </$TAG
                      metavariable: $STRING
                      language: generic
              - patterns:
                  - pattern: $VAR += $STRING
                  - metavariable-pattern:
                      patterns:
                        - pattern: <$TAG ...
                      metavariable: $STRING
                      language: generic
              - patterns:
                  - pattern: $VAR += $STRING
                  - metavariable-pattern:
                      patterns:
                        - pattern: ... </$TAG
                      metavariable: $STRING
                      language: generic
    pattern-sanitizers:
      - patterns:
          - pattern-either:
              - pattern-inside: |
                  import $S from "underscore.string"
                  ...
              - pattern-inside: |
                  import * as $S from "underscore.string"
                  ...
              - pattern-inside: |
                  import $S from "underscore.string"
                  ...
              - pattern-inside: |
                  $S = require("underscore.string")
                  ...
          - pattern-either:
              - pattern: $S.escapeHTML(...)
      - patterns:
          - pattern-either:
              - pattern-inside: |
                  import $S from "dompurify"
                  ...
              - pattern-inside: |
                  import { ..., $S,... } from "dompurify"
                  ...
              - pattern-inside: |
                  import * as $S from "dompurify"
                  ...
              - pattern-inside: |
                  $S = require("dompurify")
                  ...
              - pattern-inside: |
                  import $S from "isomorphic-dompurify"
                  ...
              - pattern-inside: |
                  import * as $S from "isomorphic-dompurify"
                  ...
              - pattern-inside: |
                  $S = require("isomorphic-dompurify")
                  ...
          - pattern-either:
              - patterns:
                  - pattern-inside: |
                      $VALUE = $S(...)
                      ...
                  - pattern: $VALUE.sanitize(...)
              - patterns:
                  - pattern-inside: |
                      $VALUE = $S.sanitize
                      ...
                  - pattern: $S(...)
              - pattern: $S.sanitize(...)
              - pattern: $S(...)
      - patterns:
          - pattern-either:
              - pattern-inside: |
                  import $S from 'xss';
                  ...
              - pattern-inside: |
                  import * as $S from 'xss';
                  ...
              - pattern-inside: |
                  $S = require("xss")
                  ...
          - pattern: $S(...)
      - patterns:
          - pattern-either:
              - pattern-inside: |
                  import $S from 'sanitize-html';
                  ...
              - pattern-inside: |
                  import * as $S from "sanitize-html";
                  ...
              - pattern-inside: |
                  $S = require("sanitize-html")
                  ...
          - pattern: $S(...)
      - patterns:
          - pattern-either:
              - pattern-inside: |
                  $S = new Remarkable()
                  ...
          - pattern: $S.render(...)

  - id: detected-stripe-restricted-api-key
    pattern-regex: rk_live_[0-9a-zA-Z]{24}
    languages:
      - regex
    message: Stripe Restricted API Key detected
    severity: ERROR
    metadata:
      cwe:
        - "CWE-798: Use of Hard-coded Credentials"
      source-rule-url: https://github.com/dxa4481/truffleHogRegexes/blob/master/truffleHogRegexes/regexes.json
      category: security
      technology:
        - secrets
        - stripe
      confidence: MEDIUM
      owasp:
        - A07:2021 - Identification and Authentication Failures
      references:
        - https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures
      cwe2022-top25: true
      cwe2021-top25: true
      subcategory:
        - audit
      likelihood: LOW
      impact: LOW
      license: Semgrep Rules License v1.0. For more details, visit
        semgrep.dev/legal/rules-license
      vulnerability_class:
        - Hard-coded Secrets

  - id: detected-username-and-password-in-uri
    patterns:
      - pattern: $PROTOCOL://$...USERNAME:$...PASSWORD@$END
      - metavariable-regex:
          metavariable: $...USERNAME
          regex: \A({?)([A-Za-z])([A-Za-z0-9_-]){5,31}(}?)\Z
      - metavariable-regex:
          metavariable: $...PASSWORD
          regex: (?!.*[\s])(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[!"#$%&'()*+,-./:;<=>?@[\]^_`{|}~]){6,32}
      - metavariable-regex:
          metavariable: $PROTOCOL
          regex: (.*http.*)|(.*sql.*)|(.*ftp.*)|(.*smtp.*)
    languages:
      - generic
    message: Username and password in URI detected
    severity: ERROR
    metadata:
      owasp:
        - A07:2021 - Identification and Authentication Failures
      cwe:
        - "CWE-798: Use of Hard-coded Credentials"
      references:
        - https://github.com/grab/secret-scanner/blob/master/scanner/signatures/pattern.go
      category: security
      technology:
        - secrets
      confidence: MEDIUM
      cwe2022-top25: true
      cwe2021-top25: true
      subcategory:
        - vuln
      likelihood: MEDIUM
      impact: MEDIUM
      license: Semgrep Rules License v1.0. For more details, visit
        semgrep.dev/legal/rules-license
      vulnerability_class:
        - Hard-coded Secrets

  - id: google-maps-apikeyleak
    patterns:
      - pattern-regex: ^(AIza[0-9A-Za-z_-]{35}(?!\S))$
    message: Detects potential Google Maps API keys in code
    languages:
      - generic
    severity: WARNING
    metadata:
      description: Detects potential Google Maps API keys in code
      severity: MEDIUM
      category: security
      confidence: MEDIUM
      impact: HIGH
      likelihood: MEDIUM
      subcategory:
        - audit
      owasp:
        - A3:2017 Sensitive Data Exposure
      references:
        - https://ozguralp.medium.com/unauthorized-google-maps-api-key-usage-cases-and-why-you-need-to-care-1ccb28bf21e
      cwe:
        - "CWE-538: Insertion of Sensitive Information into
          Externally-Accessible File or Directory"
      technology:
        - Google Maps
      license: Semgrep Rules License v1.0. For more details, visit
        semgrep.dev/legal/rules-license
      vulnerability_class:
        - Mishandled Sensitive Information

  - id: use-of-weak-rsa-key
    message: RSA keys should be at least 2048 bits based on NIST recommendation.
    languages:
      - kt
    severity: WARNING
    metadata:
      cwe:
        - "CWE-326: Inadequate Encryption Strength"
      owasp:
        - A03:2017 - Sensitive Data Exposure
        - A02:2021 - Cryptographic Failures
      source-rule-url: https://find-sec-bugs.github.io/bugs.htm#RSA_KEY_SIZE
      asvs:
        section: V6 Stored Cryptography Verification Requirements
        control_id: 6.2.5 Insecure Algorithm
        control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x14-V6-Cryptography.md#v62-algorithms
        version: "4"
      references:
        - https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html#algorithms
      category: security
      technology:
        - kotlin
      subcategory:
        - audit
      likelihood: HIGH
      impact: MEDIUM
      confidence: HIGH
      license: Semgrep Rules License v1.0. For more details, visit
        semgrep.dev/legal/rules-license
      vulnerability_class:
        - Cryptographic Issues
    patterns:
      - pattern-either:
          - pattern: |
              $KEY = $G.getInstance("RSA")
              ...
              $KEY.initialize($BITS)
      - metavariable-comparison:
          metavariable: $BITS
          comparison: $BITS < 2048

  - id: tainted-html-string
    message: Detected user input flowing into a manually constructed HTML string.
      You may be accidentally bypassing secure methods of rendering HTML by
      manually constructing HTML and this could create a cross-site scripting
      vulnerability, which could let attackers steal sensitive user data. To be
      sure this is safe, check that the HTML is rendered safely. Otherwise, use
      templates which will safely render HTML instead.
    metadata:
      cwe:
        - "CWE-79: Improper Neutralization of Input During Web Page Generation
          ('Cross-site Scripting')"
      owasp:
        - A07:2017 - Cross-Site Scripting (XSS)
        - A03:2021 - Injection
      category: security
      technology:
        - aws-lambda
      cwe2022-top25: true
      cwe2021-top25: true
      subcategory:
        - vuln
      likelihood: MEDIUM
      impact: MEDIUM
      confidence: MEDIUM
      references:
        - https://owasp.org/Top10/A03_2021-Injection
      license: Semgrep Rules License v1.0. For more details, visit
        semgrep.dev/legal/rules-license
      vulnerability_class:
        - Cross-Site-Scripting (XSS)
    languages:
      - javascript
      - typescript
    severity: WARNING
    mode: taint
    pattern-sources:
      - patterns:
          - pattern-either:
              - pattern-inside: |
                  exports.handler = function ($EVENT, ...) {
                    ...
                  }
              - pattern-inside: |
                  function $FUNC ($EVENT, ...) {...}
                  ...
                  exports.handler = $FUNC
              - pattern-inside: |
                  $FUNC = function ($EVENT, ...) {...}
                  ...
                  exports.handler = $FUNC
          - pattern: $EVENT
    pattern-sinks:
      - patterns:
          - pattern-either:
              - patterns:
                  - pattern-either:
                      - pattern: |
                          "$HTMLSTR" + $EXPR
                      - pattern: |
                          "$HTMLSTR".concat(...)
                      - pattern: $UTIL.format($HTMLSTR, ...)
                      - pattern: format($HTMLSTR, ...)
                  - metavariable-pattern:
                      metavariable: $HTMLSTR
                      language: generic
                      pattern: <$TAG ...
              - patterns:
                  - pattern: |
                      `...${...}...`
                  - pattern-regex: |
                      .*<\w+.*
          - pattern-not-inside: |
              console.$LOG(...)

  - id: unsafe-argon2-config
    message: Prefer Argon2id where possible. Per RFC9016, section 4 IETF recommends
      selecting Argon2id unless you can guarantee an adversary has no direct
      access to the computing environment.
    metadata:
      references:
        - https://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html
        - https://eprint.iacr.org/2016/759.pdf
        - https://www.cs.tau.ac.il/~tromer/papers/cache-joc-20090619.pdf
        - https://datatracker.ietf.org/doc/html/rfc9106#section-4
      category: security
      cwe:
        - "CWE-916: Use of Password Hash With Insufficient Computational Effort"
      technology:
        - argon2
        - cryptography
      owasp:
        - A02:2021 - Cryptographic Failures
      subcategory:
        - vuln
      impact: LOW
      likelihood: HIGH
      confidence: MEDIUM
      license: Semgrep Rules License v1.0. For more details, visit
        semgrep.dev/legal/rules-license
      vulnerability_class:
        - Insecure Hashing Algorithm
    languages:
      - javascript
      - typescript
    severity: WARNING
    mode: taint
    pattern-sources:
      - patterns:
          - pattern-inside: |
              $ARGON = require('argon2');
              ...
          - pattern: |
              {type: ...}
    pattern-sinks:
      - patterns:
          - pattern: |
              $Y
          - pattern-inside: |
              $ARGON.hash(...,$Y)
    pattern-sanitizers:
      - patterns:
          - pattern: |
              {type: $ARGON.argon2id}
              ...

  - id: express-cookie-session-no-httponly
    message: "Default session middleware settings: `httpOnly` not set. It ensures
      the cookie is sent only over HTTP(S), not client JavaScript, helping to
      protect against cross-site scripting attacks."
    severity: WARNING
    languages:
      - javascript
      - typescript
    metadata:
      cwe:
        - "CWE-522: Insufficiently Protected Credentials"
      owasp:
        - A02:2017 - Broken Authentication
        - A04:2021 - Insecure Design
      source-rule-url: https://expressjs.com/en/advanced/best-practice-security.html
      category: security
      technology:
        - express
      cwe2021-top25: true
      subcategory:
        - vuln
      likelihood: HIGH
      impact: LOW
      confidence: MEDIUM
      references:
        - https://owasp.org/Top10/A04_2021-Insecure_Design
      license: Semgrep Rules License v1.0. For more details, visit
        semgrep.dev/legal/rules-license
      vulnerability_class:
        - Cryptographic Issues
    patterns:
      - pattern-either:
          - pattern-inside: |
              $SESSION = require('cookie-session');
              ...
          - pattern-inside: |
              $SESSION = require('express-session');
              ...
      - pattern: $SESSION(...)
      - pattern-not-inside: $SESSION(<... {cookie:{httpOnly:true}} ...>,...)
      - pattern-not-inside: |
          $OPTS = <... {cookie:{httpOnly:true}} ...>;
          ...
          $SESSION($OPTS,...);
      - pattern-not-inside: |
          $OPTS = ...;
          ...
          $COOKIE = <... {httpOnly:true} ...>;
          ...
          $SESSION($OPTS,...);
      - pattern-not-inside: |
          $OPTS = ...;
          ...
          $OPTS.cookie = <... {httpOnly:true} ...>;
          ...
          $SESSION($OPTS,...);
      - pattern-not-inside: |
          $OPTS = ...;
          ...
          $COOKIE.httpOnly = true;
          ...
          $SESSION($OPTS,...);
      - pattern-not-inside: |
          $OPTS = ...;
          ...
          $OPTS.cookie.httpOnly = true;
          ...
          $SESSION($OPTS,...);

  - id: express-cookie-session-no-path
    message: "Default session middleware settings: `path` not set. It indicates the
      path of the cookie; use it to compare against the request path. If this
      and domain match, then send the cookie in the request."
    severity: WARNING
    languages:
      - javascript
      - typescript
    metadata:
      cwe:
        - "CWE-522: Insufficiently Protected Credentials"
      owasp:
        - A02:2017 - Broken Authentication
        - A04:2021 - Insecure Design
      source-rule-url: https://expressjs.com/en/advanced/best-practice-security.html
      category: security
      technology:
        - express
      cwe2021-top25: true
      subcategory:
        - vuln
      likelihood: HIGH
      impact: LOW
      confidence: MEDIUM
      references:
        - https://owasp.org/Top10/A04_2021-Insecure_Design
      license: Semgrep Rules License v1.0. For more details, visit
        semgrep.dev/legal/rules-license
      vulnerability_class:
        - Cryptographic Issues
    patterns:
      - pattern-either:
          - pattern-inside: |
              $SESSION = require('cookie-session');
              ...
          - pattern-inside: |
              $SESSION = require('express-session');
              ...
      - pattern: $SESSION(...)
      - pattern-not-inside: $SESSION(<... {cookie:{path:...}} ...>,...)
      - pattern-not-inside: |
          $OPTS = <... {cookie:{path:...}} ...>;
          ...
          $SESSION($OPTS,...);
      - pattern-not-inside: |
          $OPTS = ...;
          ...
          $COOKIE = <... {path:...} ...>;
          ...
          $SESSION($OPTS,...);
      - pattern-not-inside: |
          $OPTS = ...;
          ...
          $OPTS.cookie = <... {path:...} ...>;
          ...
          $SESSION($OPTS,...);
      - pattern-not-inside: |
          $OPTS = ...;
          ...
          $COOKIE.path = ...;
          ...
          $SESSION($OPTS,...);
      - pattern-not-inside: |
          $OPTS = ...;
          ...
          $OPTS.cookie.path = ...;
          ...
          $SESSION($OPTS,...);

  - id: use-of-md5
    message: Detected MD5 hash algorithm which is considered insecure. MD5 is not
      collision resistant and is therefore not suitable as a cryptographic
      signature. Use SHA256 or SHA3 instead.
    languages:
      - kt
    severity: WARNING
    metadata:
      owasp:
        - A03:2017 - Sensitive Data Exposure
        - A02:2021 - Cryptographic Failures
      cwe:
        - "CWE-328: Use of Weak Hash"
      source-rule-url: https://find-sec-bugs.github.io/bugs.htm#WEAK_MESSAGE_DIGEST_MD5
      category: security
      technology:
        - kotlin
      references:
        - https://owasp.org/Top10/A02_2021-Cryptographic_Failures
      subcategory:
        - vuln
      likelihood: LOW
      impact: MEDIUM
      confidence: MEDIUM
      license: Semgrep Rules License v1.0. For more details, visit
        semgrep.dev/legal/rules-license
      vulnerability_class:
        - Insecure Hashing Algorithm
    pattern-either:
      - pattern: |
          java.security.MessageDigest.getInstance("MD5")
      - pattern: |
          org.apache.commons.codec.digest.DigestUtils.getMd5Digest()

  - id: use-of-sha1
    message: Detected SHA1 hash algorithm which is considered insecure. SHA1 is not
      collision resistant and is therefore not suitable as a cryptographic
      signature. Use SHA256 or SHA3 instead.
    languages:
      - kt
    severity: WARNING
    metadata:
      owasp:
        - A03:2017 - Sensitive Data Exposure
        - A02:2021 - Cryptographic Failures
      cwe:
        - "CWE-327: Use of a Broken or Risky Cryptographic Algorithm"
      source-rule-url: https://find-sec-bugs.github.io/bugs.htm#WEAK_MESSAGE_DIGEST_SHA1
      asvs:
        section: V6 Stored Cryptography Verification Requirements
        control_id: 6.2.5 Insecure Algorithm
        control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x14-V6-Cryptography.md#v62-algorithms
        version: "4"
      category: security
      technology:
        - kotlin
      references:
        - https://owasp.org/Top10/A02_2021-Cryptographic_Failures
      subcategory:
        - vuln
      likelihood: LOW
      impact: MEDIUM
      confidence: MEDIUM
      license: Semgrep Rules License v1.0. For more details, visit
        semgrep.dev/legal/rules-license
      vulnerability_class:
        - Cryptographic Issues
    pattern-either:
      - patterns:
          - pattern: |
              $VAR = $MD.getInstance("$ALGO")
          - metavariable-regex:
              metavariable: $ALGO
              regex: (SHA1|SHA-1)
      - pattern: |
          $DU.getSha1Digest().digest(...)

  - id: find_sec_bugs_kotlin.FORMAT_STRING_MANIPULATION-1
    languages:
      - kotlin
    message: >
      Allowing user input to control format parameters could enable an attacker
      to cause exceptions

      to be thrown or leak information.Attackers may be able  to modify the format string argument,

      such that an exception is thrown. If this exception is left uncaught, it may crash the

      application. Alternatively, if sensitive information is used within the unused arguments,

      attackers may change the format string to reveal this information.
    metadata:
      shortDescription: Use of externally-controlled format string
      cwe: CWE-134
      category: security
      confidence: HIGH
      owasp:
        - A1:2017-Injection
        - A03:2021-Injection
      security-severity: CRITICAL
      primary_identifier: find_sec_bugs.FORMAT_STRING_MANIPULATION-1
      secondary_identifiers:
        - name: Find Security Bugs-FORMAT_STRING_MANIPULATION
          type: find_sec_bugs_type
          value: FORMAT_STRING_MANIPULATION
      license: MIT
      vulnerability_class:
        - Other
    severity: ERROR
    patterns:
      - pattern-either:
          - patterns:
              - pattern-inside: |
                  $INPUT = ($REQ: HttpServletRequest).getParameter(...)
                  ...
              - pattern-inside: |
                  $FORMAT_STR = ... + $INPUT
                  ...
          - patterns:
              - pattern-inside: |
                  $INPUT = ($REQ: HttpServletRequest).getParameter(...)
                  ...
              - pattern-inside: |
                  $FORMAT_STR = ... + $INPUT + ...
                  ...
          - pattern-inside: >
              $FORMAT_STR = ... + ($REQ: HttpServletRequest).getParameter(...) +
              ...

              ...
          - pattern-inside: |
              $FORMAT_STR = ... + ($REQ: HttpServletRequest).getParameter(...)
              ...
      - pattern-either:
          - pattern: String.format($FORMAT_STR, ...)
          - pattern: String.format(java.util.Locale.$LOCALE, $FORMAT_STR, ...)
          - patterns:
              - pattern-inside: |
                  $F = java.util.Formatter(...)
                  ...
              - pattern-either:
                  - pattern: $F.format($FORMAT_STR, ...)
                  - pattern: $F.format(java.util.Locale.$LOCALE, $FORMAT_STR, ...)
          - pattern: "($F: java.io.PrintStream).printf($FORMAT_STR, ...)"
          - pattern: "($F: java.io.PrintStream).printf(java.util.Locale.$LOCALE,
              $FORMAT_STR, ...)"
          - pattern: "($F: java.io.PrintStream).format($FORMAT_STR, ...)"
          - pattern: "($F: java.io.PrintStream).format(java.util.Locale.$LOCALE,
              $FORMAT_STR, ...)"
          - pattern: System.out.printf($FORMAT_STR, ...)
          - pattern: System.out.printf(java.util.Locale.$LOCALE, $FORMAT_STR, ...)
          - pattern: System.out.format($FORMAT_STR, ...)
          - pattern: System.out.format(java.util.Locale.$LOCALE, $FORMAT_STR, ...)

  - id: find_sec_bugs_kotlin.DANGEROUS_PERMISSION_COMBINATION-1
    languages:
      - kotlin
    message: |
      Do not grant dangerous combinations of permissions.
    metadata:
      shortDescription: Improper privilege management
      category: security
      cwe: CWE-269
      owasp:
        - A5:2017-Broken Access Control
        - A01:2021-Broken Access Control
      confidence: HIGH
      security-severity: MEDIUM
      primary_identifier: find_sec_bugs.DANGEROUS_PERMISSION_COMBINATION-1
      secondary_identifiers:
        - name: Find Security Bugs-DANGEROUS_PERMISSION_COMBINATION
          type: find_sec_bugs_type
          value: DANGEROUS_PERMISSION_COMBINATION
      license: MIT
      vulnerability_class:
        - Other
    severity: WARNING
    patterns:
      - pattern-either:
          - patterns:
              - pattern-inside: |
                  $PC = $X.getPermissions(...)
                  ...
              - pattern: $PC.add($PERMISSION)
          - pattern: |
              $REFVAR = $PERMISSION
              ...;
              ($PC: PermissionCollection).add($REFVAR)
          - pattern: "($PC: PermissionCollection).add($PERMISSION)"
      - metavariable-pattern:
          metavariable: $PERMISSION
          pattern-either:
            - pattern: ReflectPermission("suppressAccessChecks")
            - pattern: RuntimePermission("createClassLoader")

  - id: find_sec_bugs_kotlin.OVERLY_PERMISSIVE_FILE_PERMISSION-1
    languages:
      - kotlin
    message: |
      Overly permissive file permission
    metadata:
      shortDescription: Incorrect permission assignment for critical resource
      cwe: CWE-732
      owasp:
        - A5:2017-Broken Access Control
        - A01:2021-Broken Access Control
      category: security
      confidence: HIGH
      security-severity: MEDIUM
      primary_identifier: find_sec_bugs.OVERLY_PERMISSIVE_FILE_PERMISSION-1
      secondary_identifiers:
        - name: Find Security Bugs-OVERLY_PERMISSIVE_FILE_PERMISSION
          type: find_sec_bugs_type
          value: OVERLY_PERMISSIVE_FILE_PERMISSION
      license: MIT
      vulnerability_class:
        - Other
    severity: WARNING
    patterns:
      - pattern-either:
          - pattern: java.nio.file.Files.setPosixFilePermissions(...,
              java.nio.file.attribute.PosixFilePermissions.fromString("$PERM_STRING"));
          - pattern: >
              $PERMISSIONS =
              java.nio.file.attribute.PosixFilePermissions.fromString("$PERM_STRING");

              ...

              java.nio.file.Files.setPosixFilePermissions(..., $PERMISSIONS);
      - metavariable-regex:
          metavariable: $PERM_STRING
          regex: "[rwx-]{6}[rwx]{1,}"

  - id: find_sec_bugs_kotlin.BAD_HEXA_CONVERSION-1
    languages:
      - kotlin
    message: >
      When converting a byte array containing a hash signature to a human
      readable string, a

      conversion mistake can be made if the array is read byte by byte.
    metadata:
      shortDescription: Incorrect type conversion or cast
      cwe: CWE-704
      category: security
      confidence: HIGH
      owasp:
        - A6:2017-Security Misconfiguration
        - A05:2021-Security Misconfiguration
      security-severity: MEDIUM
      primary_identifier: find_sec_bugs.BAD_HEXA_CONVERSION-1
      secondary_identifiers:
        - name: Find Security Bugs-BAD_HEXA_CONVERSION
          type: find_sec_bugs_type
          value: BAD_HEXA_CONVERSION
      license: MIT
      vulnerability_class:
        - Other
    severity: WARNING
    patterns:
      - pattern-inside: |
          $B_ARR = ($MD: java.security.MessageDigest).digest(...);
          ...
      - pattern-either:
          - pattern: |
              for($B in $B_ARR) {
                ...
                $B_TOSTR
              }
          - pattern: |
              while(...) {
                ...
                $B_TOSTR
              }
          - pattern: |
              do {
                ...
                $B_TOSTR
              } while(...)
      - metavariable-pattern:
          metavariable: $B_TOSTR
          patterns:
            - pattern-either:
                - pattern: java.lang.Integer.toHexString($B_TOINT)
                - pattern: Integer.toHexString($B_TOINT)
                - pattern: $B_TOINT.toHexString(...)
            - metavariable-pattern:
                metavariable: $B_TOINT
                pattern-either:
                  - pattern: $B_ARR[...].toInt()
                  - pattern: $B_ARR[...]
                  - pattern: $B.toInt()
                  - pattern: $B

  - id: find_sec_bugs_kotlin.MODIFICATION_AFTER_VALIDATION-1
    languages:
      - kotlin
    message: |
      CERT: IDS11-J. Perform any string modifications before validation
    metadata:
      shortDescription: Collapse of data into unsafe value
      category: security
      cwe: CWE-182
      confidence: HIGH
      owasp:
        - A1:2017-Injection
        - A03:2021-Injection
      security-severity: MEDIUM
      primary_identifier: find_sec_bugs.MODIFICATION_AFTER_VALIDATION-1
      secondary_identifiers:
        - name: Find Security Bugs-MODIFICATION_AFTER_VALIDATION
          type: find_sec_bugs_type
          value: MODIFICATION_AFTER_VALIDATION
      license: MIT
      vulnerability_class:
        - Other
    severity: WARNING
    patterns:
      - pattern-inside: |
          $PATTERN = Pattern.compile(...)
          ...
      - pattern-inside: |
          $PATTERN.matcher($VAR)
          ...
      - pattern-either:
          - pattern: |
              $VAR + $OTHER
          - patterns:
              - pattern: |
                  $VAR.$METHOD(...)
              - metavariable-regex:
                  metavariable: $METHOD
                  regex: (replace|replaceAll|replaceFirst|concat)

  - id: find_sec_bugs_kotlin.NORMALIZATION_AFTER_VALIDATION-1
    languages:
      - kotlin
    message: |
      IDS01-J. Normalize strings before validating them
    metadata:
      shortDescription: "Incorrect behavior order: validate before canonicalize"
      category: security
      cwe: CWE-180
      confidence: HIGH
      owasp:
        - A1:2017-Injection
        - A03:2021-Injection
      security-severity: MEDIUM
      primary_identifier: find_sec_bugs.NORMALIZATION_AFTER_VALIDATION-1
      secondary_identifiers:
        - name: Find Security Bugs-NORMALIZATION_AFTER_VALIDATION
          type: find_sec_bugs_type
          value: NORMALIZATION_AFTER_VALIDATION
      license: MIT
      vulnerability_class:
        - Other
    severity: WARNING
    patterns:
      - pattern: |-
          $Y = java.util.regex.Pattern.compile("[<>]");
          ...
          $Y.matcher($VAR);
          ...
          java.text.Normalizer.normalize($VAR, ...);
